/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.node;

import com.company.analysis.*;

@SuppressWarnings("nls")
public final class ASingleTitrations extends PTitrations
{
    private TTString _tString_;
    private TTColon _tColon_;
    private PFactor _factor_;
    private PTitrationEnd _titrationEnd_;

    public ASingleTitrations()
    {
        // Constructor
    }

    public ASingleTitrations(
        @SuppressWarnings("hiding") TTString _tString_,
        @SuppressWarnings("hiding") TTColon _tColon_,
        @SuppressWarnings("hiding") PFactor _factor_,
        @SuppressWarnings("hiding") PTitrationEnd _titrationEnd_)
    {
        // Constructor
        setTString(_tString_);

        setTColon(_tColon_);

        setFactor(_factor_);

        setTitrationEnd(_titrationEnd_);

    }

    @Override
    public Object clone()
    {
        return new ASingleTitrations(
            cloneNode(this._tString_),
            cloneNode(this._tColon_),
            cloneNode(this._factor_),
            cloneNode(this._titrationEnd_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASingleTitrations(this);
    }

    public TTString getTString()
    {
        return this._tString_;
    }

    public void setTString(TTString node)
    {
        if(this._tString_ != null)
        {
            this._tString_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tString_ = node;
    }

    public TTColon getTColon()
    {
        return this._tColon_;
    }

    public void setTColon(TTColon node)
    {
        if(this._tColon_ != null)
        {
            this._tColon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tColon_ = node;
    }

    public PFactor getFactor()
    {
        return this._factor_;
    }

    public void setFactor(PFactor node)
    {
        if(this._factor_ != null)
        {
            this._factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factor_ = node;
    }

    public PTitrationEnd getTitrationEnd()
    {
        return this._titrationEnd_;
    }

    public void setTitrationEnd(PTitrationEnd node)
    {
        if(this._titrationEnd_ != null)
        {
            this._titrationEnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._titrationEnd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tString_)
            + toString(this._tColon_)
            + toString(this._factor_)
            + toString(this._titrationEnd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tString_ == child)
        {
            this._tString_ = null;
            return;
        }

        if(this._tColon_ == child)
        {
            this._tColon_ = null;
            return;
        }

        if(this._factor_ == child)
        {
            this._factor_ = null;
            return;
        }

        if(this._titrationEnd_ == child)
        {
            this._titrationEnd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tString_ == oldChild)
        {
            setTString((TTString) newChild);
            return;
        }

        if(this._tColon_ == oldChild)
        {
            setTColon((TTColon) newChild);
            return;
        }

        if(this._factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        if(this._titrationEnd_ == oldChild)
        {
            setTitrationEnd((PTitrationEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
