/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.node;

import com.company.analysis.*;

@SuppressWarnings("nls")
public final class ASingleLogicalExpr extends PLogicalExpr
{
    private PExpression _expression_;
    private PLogicalOperator _logicalOperator_;
    private PDouble _double_;

    public ASingleLogicalExpr()
    {
        // Constructor
    }

    public ASingleLogicalExpr(
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") PLogicalOperator _logicalOperator_,
        @SuppressWarnings("hiding") PDouble _double_)
    {
        // Constructor
        setExpression(_expression_);

        setLogicalOperator(_logicalOperator_);

        setDouble(_double_);

    }

    @Override
    public Object clone()
    {
        return new ASingleLogicalExpr(
            cloneNode(this._expression_),
            cloneNode(this._logicalOperator_),
            cloneNode(this._double_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASingleLogicalExpr(this);
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public PLogicalOperator getLogicalOperator()
    {
        return this._logicalOperator_;
    }

    public void setLogicalOperator(PLogicalOperator node)
    {
        if(this._logicalOperator_ != null)
        {
            this._logicalOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicalOperator_ = node;
    }

    public PDouble getDouble()
    {
        return this._double_;
    }

    public void setDouble(PDouble node)
    {
        if(this._double_ != null)
        {
            this._double_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._double_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expression_)
            + toString(this._logicalOperator_)
            + toString(this._double_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._logicalOperator_ == child)
        {
            this._logicalOperator_ = null;
            return;
        }

        if(this._double_ == child)
        {
            this._double_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._logicalOperator_ == oldChild)
        {
            setLogicalOperator((PLogicalOperator) newChild);
            return;
        }

        if(this._double_ == oldChild)
        {
            setDouble((PDouble) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
