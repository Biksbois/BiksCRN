/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.node;

import com.company.analysis.*;

@SuppressWarnings("nls")
public final class ADoubleReaction extends PReaction
{
    private PReactant _reactant_;
    private PArrows _arrows_;

    public ADoubleReaction()
    {
        // Constructor
    }

    public ADoubleReaction(
        @SuppressWarnings("hiding") PReactant _reactant_,
        @SuppressWarnings("hiding") PArrows _arrows_)
    {
        // Constructor
        setReactant(_reactant_);

        setArrows(_arrows_);

    }

    @Override
    public Object clone()
    {
        return new ADoubleReaction(
            cloneNode(this._reactant_),
            cloneNode(this._arrows_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADoubleReaction(this);
    }

    public PReactant getReactant()
    {
        return this._reactant_;
    }

    public void setReactant(PReactant node)
    {
        if(this._reactant_ != null)
        {
            this._reactant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._reactant_ = node;
    }

    public PArrows getArrows()
    {
        return this._arrows_;
    }

    public void setArrows(PArrows node)
    {
        if(this._arrows_ != null)
        {
            this._arrows_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrows_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._reactant_)
            + toString(this._arrows_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._reactant_ == child)
        {
            this._reactant_ = null;
            return;
        }

        if(this._arrows_ == child)
        {
            this._arrows_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._reactant_ == oldChild)
        {
            setReactant((PReactant) newChild);
            return;
        }

        if(this._arrows_ == oldChild)
        {
            setArrows((PArrows) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
