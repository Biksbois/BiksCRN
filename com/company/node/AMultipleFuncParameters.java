/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.node;

import com.company.analysis.*;

@SuppressWarnings("nls")
public final class AMultipleFuncParameters extends PFuncParameters
{
    private PFactor _factor_;
    private TTComma _tComma_;
    private PFuncParameters _funcParameters_;

    public AMultipleFuncParameters()
    {
        // Constructor
    }

    public AMultipleFuncParameters(
        @SuppressWarnings("hiding") PFactor _factor_,
        @SuppressWarnings("hiding") TTComma _tComma_,
        @SuppressWarnings("hiding") PFuncParameters _funcParameters_)
    {
        // Constructor
        setFactor(_factor_);

        setTComma(_tComma_);

        setFuncParameters(_funcParameters_);

    }

    @Override
    public Object clone()
    {
        return new AMultipleFuncParameters(
            cloneNode(this._factor_),
            cloneNode(this._tComma_),
            cloneNode(this._funcParameters_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleFuncParameters(this);
    }

    public PFactor getFactor()
    {
        return this._factor_;
    }

    public void setFactor(PFactor node)
    {
        if(this._factor_ != null)
        {
            this._factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factor_ = node;
    }

    public TTComma getTComma()
    {
        return this._tComma_;
    }

    public void setTComma(TTComma node)
    {
        if(this._tComma_ != null)
        {
            this._tComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tComma_ = node;
    }

    public PFuncParameters getFuncParameters()
    {
        return this._funcParameters_;
    }

    public void setFuncParameters(PFuncParameters node)
    {
        if(this._funcParameters_ != null)
        {
            this._funcParameters_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._funcParameters_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._factor_)
            + toString(this._tComma_)
            + toString(this._funcParameters_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._factor_ == child)
        {
            this._factor_ = null;
            return;
        }

        if(this._tComma_ == child)
        {
            this._tComma_ = null;
            return;
        }

        if(this._funcParameters_ == child)
        {
            this._funcParameters_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        if(this._tComma_ == oldChild)
        {
            setTComma((TTComma) newChild);
            return;
        }

        if(this._funcParameters_ == oldChild)
        {
            setFuncParameters((PFuncParameters) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
