/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.node;

import java.util.*;
import com.company.analysis.*;

@SuppressWarnings("nls")
public final class ABodySamplefunc extends PSamplefunc
{
    private TTLTurborg _tLTurborg_;
    private final LinkedList<PSamplebody> _samplebody_ = new LinkedList<PSamplebody>();
    private TTRTurborg _tRTurborg_;

    public ABodySamplefunc()
    {
        // Constructor
    }

    public ABodySamplefunc(
        @SuppressWarnings("hiding") TTLTurborg _tLTurborg_,
        @SuppressWarnings("hiding") List<?> _samplebody_,
        @SuppressWarnings("hiding") TTRTurborg _tRTurborg_)
    {
        // Constructor
        setTLTurborg(_tLTurborg_);

        setSamplebody(_samplebody_);

        setTRTurborg(_tRTurborg_);

    }

    @Override
    public Object clone()
    {
        return new ABodySamplefunc(
            cloneNode(this._tLTurborg_),
            cloneList(this._samplebody_),
            cloneNode(this._tRTurborg_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABodySamplefunc(this);
    }

    public TTLTurborg getTLTurborg()
    {
        return this._tLTurborg_;
    }

    public void setTLTurborg(TTLTurborg node)
    {
        if(this._tLTurborg_ != null)
        {
            this._tLTurborg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLTurborg_ = node;
    }

    public LinkedList<PSamplebody> getSamplebody()
    {
        return this._samplebody_;
    }

    public void setSamplebody(List<?> list)
    {
        for(PSamplebody e : this._samplebody_)
        {
            e.parent(null);
        }
        this._samplebody_.clear();

        for(Object obj_e : list)
        {
            PSamplebody e = (PSamplebody) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._samplebody_.add(e);
        }
    }

    public TTRTurborg getTRTurborg()
    {
        return this._tRTurborg_;
    }

    public void setTRTurborg(TTRTurborg node)
    {
        if(this._tRTurborg_ != null)
        {
            this._tRTurborg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRTurborg_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tLTurborg_)
            + toString(this._samplebody_)
            + toString(this._tRTurborg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tLTurborg_ == child)
        {
            this._tLTurborg_ = null;
            return;
        }

        if(this._samplebody_.remove(child))
        {
            return;
        }

        if(this._tRTurborg_ == child)
        {
            this._tRTurborg_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tLTurborg_ == oldChild)
        {
            setTLTurborg((TTLTurborg) newChild);
            return;
        }

        for(ListIterator<PSamplebody> i = this._samplebody_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSamplebody) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._tRTurborg_ == oldChild)
        {
            setTRTurborg((TTRTurborg) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
