/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.node;

import com.company.analysis.*;

@SuppressWarnings("nls")
public final class AMainProgram extends PProgram
{
    private PInit _init_;
    private PProtocol _protocol_;

    public AMainProgram()
    {
        // Constructor
    }

    public AMainProgram(
        @SuppressWarnings("hiding") PInit _init_,
        @SuppressWarnings("hiding") PProtocol _protocol_)
    {
        // Constructor
        setInit(_init_);

        setProtocol(_protocol_);

    }

    @Override
    public Object clone()
    {
        return new AMainProgram(
            cloneNode(this._init_),
            cloneNode(this._protocol_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMainProgram(this);
    }

    public PInit getInit()
    {
        return this._init_;
    }

    public void setInit(PInit node)
    {
        if(this._init_ != null)
        {
            this._init_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._init_ = node;
    }

    public PProtocol getProtocol()
    {
        return this._protocol_;
    }

    public void setProtocol(PProtocol node)
    {
        if(this._protocol_ != null)
        {
            this._protocol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._protocol_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._init_)
            + toString(this._protocol_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._init_ == child)
        {
            this._init_ = null;
            return;
        }

        if(this._protocol_ == child)
        {
            this._protocol_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._init_ == oldChild)
        {
            setInit((PInit) newChild);
            return;
        }

        if(this._protocol_ == oldChild)
        {
            setProtocol((PProtocol) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
