/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.node;

import com.company.analysis.*;

@SuppressWarnings("nls")
public final class AWithParamFuncParen extends PFuncParen
{
    private PFuncParameters _funcParameters_;
    private TTRParen _tRParen_;

    public AWithParamFuncParen()
    {
        // Constructor
    }

    public AWithParamFuncParen(
        @SuppressWarnings("hiding") PFuncParameters _funcParameters_,
        @SuppressWarnings("hiding") TTRParen _tRParen_)
    {
        // Constructor
        setFuncParameters(_funcParameters_);

        setTRParen(_tRParen_);

    }

    @Override
    public Object clone()
    {
        return new AWithParamFuncParen(
            cloneNode(this._funcParameters_),
            cloneNode(this._tRParen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWithParamFuncParen(this);
    }

    public PFuncParameters getFuncParameters()
    {
        return this._funcParameters_;
    }

    public void setFuncParameters(PFuncParameters node)
    {
        if(this._funcParameters_ != null)
        {
            this._funcParameters_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._funcParameters_ = node;
    }

    public TTRParen getTRParen()
    {
        return this._tRParen_;
    }

    public void setTRParen(TTRParen node)
    {
        if(this._tRParen_ != null)
        {
            this._tRParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._funcParameters_)
            + toString(this._tRParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._funcParameters_ == child)
        {
            this._funcParameters_ = null;
            return;
        }

        if(this._tRParen_ == child)
        {
            this._tRParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._funcParameters_ == oldChild)
        {
            setFuncParameters((PFuncParameters) newChild);
            return;
        }

        if(this._tRParen_ == oldChild)
        {
            setTRParen((TTRParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
