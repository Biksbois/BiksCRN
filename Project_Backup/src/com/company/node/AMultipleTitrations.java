/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.node;

import com.company.analysis.*;

@SuppressWarnings("nls")
public final class AMultipleTitrations extends PTitrations
{
    private TTString _tString_;
    private TTColon _tColon_;
    private PFactor _factor_;
    private PTitrationContinue _titrationContinue_;
    private PTitrations _titrations_;

    public AMultipleTitrations()
    {
        // Constructor
    }

    public AMultipleTitrations(
        @SuppressWarnings("hiding") TTString _tString_,
        @SuppressWarnings("hiding") TTColon _tColon_,
        @SuppressWarnings("hiding") PFactor _factor_,
        @SuppressWarnings("hiding") PTitrationContinue _titrationContinue_,
        @SuppressWarnings("hiding") PTitrations _titrations_)
    {
        // Constructor
        setTString(_tString_);

        setTColon(_tColon_);

        setFactor(_factor_);

        setTitrationContinue(_titrationContinue_);

        setTitrations(_titrations_);

    }

    @Override
    public Object clone()
    {
        return new AMultipleTitrations(
            cloneNode(this._tString_),
            cloneNode(this._tColon_),
            cloneNode(this._factor_),
            cloneNode(this._titrationContinue_),
            cloneNode(this._titrations_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleTitrations(this);
    }

    public TTString getTString()
    {
        return this._tString_;
    }

    public void setTString(TTString node)
    {
        if(this._tString_ != null)
        {
            this._tString_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tString_ = node;
    }

    public TTColon getTColon()
    {
        return this._tColon_;
    }

    public void setTColon(TTColon node)
    {
        if(this._tColon_ != null)
        {
            this._tColon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tColon_ = node;
    }

    public PFactor getFactor()
    {
        return this._factor_;
    }

    public void setFactor(PFactor node)
    {
        if(this._factor_ != null)
        {
            this._factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factor_ = node;
    }

    public PTitrationContinue getTitrationContinue()
    {
        return this._titrationContinue_;
    }

    public void setTitrationContinue(PTitrationContinue node)
    {
        if(this._titrationContinue_ != null)
        {
            this._titrationContinue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._titrationContinue_ = node;
    }

    public PTitrations getTitrations()
    {
        return this._titrations_;
    }

    public void setTitrations(PTitrations node)
    {
        if(this._titrations_ != null)
        {
            this._titrations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._titrations_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tString_)
            + toString(this._tColon_)
            + toString(this._factor_)
            + toString(this._titrationContinue_)
            + toString(this._titrations_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tString_ == child)
        {
            this._tString_ = null;
            return;
        }

        if(this._tColon_ == child)
        {
            this._tColon_ = null;
            return;
        }

        if(this._factor_ == child)
        {
            this._factor_ = null;
            return;
        }

        if(this._titrationContinue_ == child)
        {
            this._titrationContinue_ = null;
            return;
        }

        if(this._titrations_ == child)
        {
            this._titrations_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tString_ == oldChild)
        {
            setTString((TTString) newChild);
            return;
        }

        if(this._tColon_ == oldChild)
        {
            setTColon((TTColon) newChild);
            return;
        }

        if(this._factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        if(this._titrationContinue_ == oldChild)
        {
            setTitrationContinue((PTitrationContinue) newChild);
            return;
        }

        if(this._titrations_ == oldChild)
        {
            setTitrations((PTitrations) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
