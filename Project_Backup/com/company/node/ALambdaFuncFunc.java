/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.node;

import com.company.analysis.*;

@SuppressWarnings("nls")
public final class ALambdaFuncFunc extends PFunc
{
    private TTFuncdcl _tFuncdcl_;
    private TTString _tString_;
    private TTLParen _tLParen_;
    private PInput _input_;
    private TTRParen _tRParen_;
    private TTLambda _tLambda_;
    private PExpression _expression_;
    private TTSemicolon _tSemicolon_;

    public ALambdaFuncFunc()
    {
        // Constructor
    }

    public ALambdaFuncFunc(
        @SuppressWarnings("hiding") TTFuncdcl _tFuncdcl_,
        @SuppressWarnings("hiding") TTString _tString_,
        @SuppressWarnings("hiding") TTLParen _tLParen_,
        @SuppressWarnings("hiding") PInput _input_,
        @SuppressWarnings("hiding") TTRParen _tRParen_,
        @SuppressWarnings("hiding") TTLambda _tLambda_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TTSemicolon _tSemicolon_)
    {
        // Constructor
        setTFuncdcl(_tFuncdcl_);

        setTString(_tString_);

        setTLParen(_tLParen_);

        setInput(_input_);

        setTRParen(_tRParen_);

        setTLambda(_tLambda_);

        setExpression(_expression_);

        setTSemicolon(_tSemicolon_);

    }

    @Override
    public Object clone()
    {
        return new ALambdaFuncFunc(
            cloneNode(this._tFuncdcl_),
            cloneNode(this._tString_),
            cloneNode(this._tLParen_),
            cloneNode(this._input_),
            cloneNode(this._tRParen_),
            cloneNode(this._tLambda_),
            cloneNode(this._expression_),
            cloneNode(this._tSemicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALambdaFuncFunc(this);
    }

    public TTFuncdcl getTFuncdcl()
    {
        return this._tFuncdcl_;
    }

    public void setTFuncdcl(TTFuncdcl node)
    {
        if(this._tFuncdcl_ != null)
        {
            this._tFuncdcl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tFuncdcl_ = node;
    }

    public TTString getTString()
    {
        return this._tString_;
    }

    public void setTString(TTString node)
    {
        if(this._tString_ != null)
        {
            this._tString_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tString_ = node;
    }

    public TTLParen getTLParen()
    {
        return this._tLParen_;
    }

    public void setTLParen(TTLParen node)
    {
        if(this._tLParen_ != null)
        {
            this._tLParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLParen_ = node;
    }

    public PInput getInput()
    {
        return this._input_;
    }

    public void setInput(PInput node)
    {
        if(this._input_ != null)
        {
            this._input_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._input_ = node;
    }

    public TTRParen getTRParen()
    {
        return this._tRParen_;
    }

    public void setTRParen(TTRParen node)
    {
        if(this._tRParen_ != null)
        {
            this._tRParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRParen_ = node;
    }

    public TTLambda getTLambda()
    {
        return this._tLambda_;
    }

    public void setTLambda(TTLambda node)
    {
        if(this._tLambda_ != null)
        {
            this._tLambda_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLambda_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TTSemicolon getTSemicolon()
    {
        return this._tSemicolon_;
    }

    public void setTSemicolon(TTSemicolon node)
    {
        if(this._tSemicolon_ != null)
        {
            this._tSemicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tSemicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tFuncdcl_)
            + toString(this._tString_)
            + toString(this._tLParen_)
            + toString(this._input_)
            + toString(this._tRParen_)
            + toString(this._tLambda_)
            + toString(this._expression_)
            + toString(this._tSemicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tFuncdcl_ == child)
        {
            this._tFuncdcl_ = null;
            return;
        }

        if(this._tString_ == child)
        {
            this._tString_ = null;
            return;
        }

        if(this._tLParen_ == child)
        {
            this._tLParen_ = null;
            return;
        }

        if(this._input_ == child)
        {
            this._input_ = null;
            return;
        }

        if(this._tRParen_ == child)
        {
            this._tRParen_ = null;
            return;
        }

        if(this._tLambda_ == child)
        {
            this._tLambda_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._tSemicolon_ == child)
        {
            this._tSemicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tFuncdcl_ == oldChild)
        {
            setTFuncdcl((TTFuncdcl) newChild);
            return;
        }

        if(this._tString_ == oldChild)
        {
            setTString((TTString) newChild);
            return;
        }

        if(this._tLParen_ == oldChild)
        {
            setTLParen((TTLParen) newChild);
            return;
        }

        if(this._input_ == oldChild)
        {
            setInput((PInput) newChild);
            return;
        }

        if(this._tRParen_ == oldChild)
        {
            setTRParen((TTRParen) newChild);
            return;
        }

        if(this._tLambda_ == oldChild)
        {
            setTLambda((TTLambda) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._tSemicolon_ == oldChild)
        {
            setTSemicolon((TTSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
