/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.node;

import com.company.analysis.*;

@SuppressWarnings("nls")
public final class AFCallFuncCall extends PFuncCall
{
    private TTString _tString_;
    private TTLParen _tLParen_;
    private PFuncParen _funcParen_;

    public AFCallFuncCall()
    {
        // Constructor
    }

    public AFCallFuncCall(
        @SuppressWarnings("hiding") TTString _tString_,
        @SuppressWarnings("hiding") TTLParen _tLParen_,
        @SuppressWarnings("hiding") PFuncParen _funcParen_)
    {
        // Constructor
        setTString(_tString_);

        setTLParen(_tLParen_);

        setFuncParen(_funcParen_);

    }

    @Override
    public Object clone()
    {
        return new AFCallFuncCall(
            cloneNode(this._tString_),
            cloneNode(this._tLParen_),
            cloneNode(this._funcParen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFCallFuncCall(this);
    }

    public TTString getTString()
    {
        return this._tString_;
    }

    public void setTString(TTString node)
    {
        if(this._tString_ != null)
        {
            this._tString_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tString_ = node;
    }

    public TTLParen getTLParen()
    {
        return this._tLParen_;
    }

    public void setTLParen(TTLParen node)
    {
        if(this._tLParen_ != null)
        {
            this._tLParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLParen_ = node;
    }

    public PFuncParen getFuncParen()
    {
        return this._funcParen_;
    }

    public void setFuncParen(PFuncParen node)
    {
        if(this._funcParen_ != null)
        {
            this._funcParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._funcParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tString_)
            + toString(this._tLParen_)
            + toString(this._funcParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tString_ == child)
        {
            this._tString_ = null;
            return;
        }

        if(this._tLParen_ == child)
        {
            this._tLParen_ = null;
            return;
        }

        if(this._funcParen_ == child)
        {
            this._funcParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tString_ == oldChild)
        {
            setTString((TTString) newChild);
            return;
        }

        if(this._tLParen_ == oldChild)
        {
            setTLParen((TTLParen) newChild);
            return;
        }

        if(this._funcParen_ == oldChild)
        {
            setFuncParen((PFuncParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
