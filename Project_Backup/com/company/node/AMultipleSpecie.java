/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.node;

import com.company.analysis.*;

@SuppressWarnings("nls")
public final class AMultipleSpecie extends PSpecie
{
    private TTString _tString_;
    private TTEqual _tEqual_;
    private PExpression _expression_;
    private TTComma _tComma_;
    private PSpecie _specie_;

    public AMultipleSpecie()
    {
        // Constructor
    }

    public AMultipleSpecie(
        @SuppressWarnings("hiding") TTString _tString_,
        @SuppressWarnings("hiding") TTEqual _tEqual_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TTComma _tComma_,
        @SuppressWarnings("hiding") PSpecie _specie_)
    {
        // Constructor
        setTString(_tString_);

        setTEqual(_tEqual_);

        setExpression(_expression_);

        setTComma(_tComma_);

        setSpecie(_specie_);

    }

    @Override
    public Object clone()
    {
        return new AMultipleSpecie(
            cloneNode(this._tString_),
            cloneNode(this._tEqual_),
            cloneNode(this._expression_),
            cloneNode(this._tComma_),
            cloneNode(this._specie_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleSpecie(this);
    }

    public TTString getTString()
    {
        return this._tString_;
    }

    public void setTString(TTString node)
    {
        if(this._tString_ != null)
        {
            this._tString_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tString_ = node;
    }

    public TTEqual getTEqual()
    {
        return this._tEqual_;
    }

    public void setTEqual(TTEqual node)
    {
        if(this._tEqual_ != null)
        {
            this._tEqual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tEqual_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TTComma getTComma()
    {
        return this._tComma_;
    }

    public void setTComma(TTComma node)
    {
        if(this._tComma_ != null)
        {
            this._tComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tComma_ = node;
    }

    public PSpecie getSpecie()
    {
        return this._specie_;
    }

    public void setSpecie(PSpecie node)
    {
        if(this._specie_ != null)
        {
            this._specie_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._specie_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tString_)
            + toString(this._tEqual_)
            + toString(this._expression_)
            + toString(this._tComma_)
            + toString(this._specie_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tString_ == child)
        {
            this._tString_ = null;
            return;
        }

        if(this._tEqual_ == child)
        {
            this._tEqual_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._tComma_ == child)
        {
            this._tComma_ = null;
            return;
        }

        if(this._specie_ == child)
        {
            this._specie_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tString_ == oldChild)
        {
            setTString((TTString) newChild);
            return;
        }

        if(this._tEqual_ == oldChild)
        {
            setTEqual((TTEqual) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._tComma_ == oldChild)
        {
            setTComma((TTComma) newChild);
            return;
        }

        if(this._specie_ == oldChild)
        {
            setSpecie((PSpecie) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
