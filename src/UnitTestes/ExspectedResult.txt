import numpy as np 
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from itertools import count
from threading import Timer
import math
import warnings

def combinedPercent(percentList):
    result = 0
    for number in percentList:
        result += number
    return result

def split(sample, sampleList, percentList):

    for key, value in sample.items():
        for i in range(0, len(sampleList)):
            sampleList[i][key] = [math.floor(value[-1] * percentList[i])]

    return sample, sampleList

def disposePercent(sample, percent):
    for key in sample.keys():
        sample[key] = [math.ceil(sample.get(key)[-1] * (1 - percent))]
    return sample


def dispose(sample):
    for key in sample.keys():
        sample[key] = [0]
    return sample
 
def mix(sampleList):
    rSample = {}

    for sample in sampleList:
        for key in sample.keys():
            if key in rSample:
                rSample[key][-1] += sample.get(key)[-1]
            else :
                rSample[key] = [sample.get(key)[-1]]

    for sample in sampleList:
        sample = dispose(sample)
    
    return rSample

def equilibrate(sample, stepsize, times, timeInterval, bitesize):
    sample.h = stepsize
    sample.steps = times
    sample.bitesize = bitesize
    plt.figure(figsize=(12, 7),dpi=80, num='BiksCRN')
    ani = FuncAnimation(plt.gcf(), sample.Animate, interval=timeInterval)
    plt.show()

def GetPercent(i, steps):
    result = (i/steps)*100
    if result > 100:
        return "100"
    else:
        return "{:.2f}".format(result)

def SaveGraph(Sample, name, taken):
    rSpecies = Sample.sample.copy()
    rSteps = Sample.stepList
    for key in Sample.sample:
        Sample.sample[key] = [Sample.sample.get(key)[-1]]
    Sample.stepList = []
    return rSpecies, rSteps, name, taken

def DrawGraph(Species, Steps, name, i, s):
        for key, value in Species.items():
            plt.plot(Steps, value, label=key + " = {:.2f} mol/L".format(Species.get(key)[-1]))
        plt.xlabel('Time (t)')
        plt.suptitle("Equilibrating sample " + name + " for " + str(len(Steps)) + " cycles (" + GetPercent(i, s) + "%)", fontsize=12)
        plt.ylabel('Concentration (mol/L)')
        
        plt.legend()

class SampleQ():
    sample = {
        "A":[100],
        "B":[90],
        "C":[80],
        "D":[70],
        "E":[60]
    }

    def AccTitration(self, act, time):
        time += self.h
        if(act <= time):
            result = math.floor(time/act)
            time = time - act * result
            return result, time
        else:
            return 0, time

    stepList = []
    index = count()
    steps = 100
    h = 0.0025
    bitesize = 1


    def Euler(self, i) :
        if(i < self.steps):
            r0=0.5+2.0*i*(self.sample.get("A")[-1]**1)
            r1=1*(self.sample.get("B")[-1]**1)
            r2=1*(self.sample.get("A")[-1]**1)*(self.sample.get("C")[-1]**1)
            r3=1*(self.sample.get("D")[-1]**1)
            r4=1*(self.sample.get("B")[-1]**1)*(self.sample.get("E")[-1]**1)
            r5=1*(self.sample.get("B")[-1]**1)*(self.sample.get("E")[-1]**1)
            r6=1*(self.sample.get("E")[-1]**1)

            self.sample["A"].append(self.sample.get("A")[-1]+(r0*(-1)+r1*(-1*(-1))+r2*(-1)+r5*(1))*self.h)
            self.sample["B"].append(self.sample.get("B")[-1]+(r0*(1)+r1*(1*(-1))+r3*(1)+r4*(1*(-1))+r5*(-1))*self.h)
            self.sample["C"].append(self.sample.get("C")[-1]+(r2*(-1)+r5*(1)+r6*(1))*self.h)
            self.sample["D"].append(self.sample.get("D")[-1]+(r2*(1)+r3*(-1)+r4*(-1*(-1)))*self.h)
            self.sample["E"].append(self.sample.get("E")[-1]+(r3*(1)+r4*(1*(-1))+r5*(-1)+r6*(-1))*self.h)

    def ApplyTitration(self):
        pass

    @staticmethod
    def Animate(i) :
        plt.cla()
        for i in range(SampleQ.bitesize):
            index = next(SampleQ.index)
            if len(SampleQ.stepList) == 0:
                SampleQ.stepList.append(index*SampleQ.h)
            else:
                SampleQ.stepList.append(index*SampleQ.h)
                SampleQ.Euler(SampleQ, index)
                SampleQ.ApplyTitration(SampleQ)
                if(index >= SampleQ.steps):
                    SampleQ.stepList.pop()
                    break

        DrawGraph(SampleQ.sample, SampleQ.stepList, "Q", index, SampleQ.steps)
class SampleL():
    sample = {
        "A":[100],
        "C":[80],
        "D":[70],
        "U":[1],
        "E":[60]
    }

    def AccTitration(self, act, time):
        time += self.h
        if(act <= time):
            result = math.floor(time/act)
            time = time - act * result
            return result, time
        else:
            return 0, time

    stepList = []
    index = count()
    steps = 100
    h = 0.0025
    bitesize = 1


    AddMol0=0
    AddMol1=0

    RemMol0=0
    RemMol1=0
    RemMol2=0

    def Euler(self, i) :
        if(i < self.steps):
            r0=1*(self.sample.get("A")[-1]**1)
            r1=1*(self.sample.get("A")[-1]**1)*(self.sample.get("C")[-1]**1)
            r2=2*(self.sample.get("D")[-1]**1)
            r3=2*(self.sample.get("D")[-1]**1)
            r4=1*(self.sample.get("U")[-1]**1)*(self.sample.get("E")[-1]**1)
            r5=1*(self.sample.get("U")[-1]**1)*(self.sample.get("E")[-1]**1)
            r6=3*(self.sample.get("A")[-1]**1)*(self.sample.get("C")[-1]**1)
            r7=3*(self.sample.get("E")[-1]**1)

            self.sample["A"].append(self.sample.get("A")[-1]+(r0*(-1)+r1*(-1)+r2*(-1*(-1))+r5*(1)+r6*(1*(-1)))*self.h)
            self.sample["C"].append(self.sample.get("C")[-1]+(r1*(-1)+r2*(-1*(-1))+r5*(1)+r6*(1*(-1))+r7*(1))*self.h)
            self.sample["D"].append(self.sample.get("D")[-1]+(r1*(1)+r2*(1*(-1))+r3*(-1)+r4*(-1*(-1)))*self.h)
            self.sample["U"].append(self.sample.get("U")[-1]+(r0*(1)+r3*(1)+r4*(1*(-1))+r5*(-1)+r6*(-1*(-1)))*self.h)
            self.sample["E"].append(self.sample.get("E")[-1]+(r3*(1)+r4*(1*(-1))+r5*(-1)+r6*(-1*(-1))+r7*(-1))*self.h)

    def ApplyTitration(self):
        Result, self.AddMol0 = self.AccTitration(self, 20, self.AddMol0)
        self.sample["U"][-1] = self.sample.get("U")[-1]+Result*1
        if self.sample.get("U")[-1]<5.00:
            Result, self.AddMol1 = self.AccTitration(self, 45, self.AddMol1)
            self.sample["U"][-1] = self.sample.get("U")[-1]+Result*1
        Result, self.RemMol0 = self.AccTitration(self, 1, self.RemMol0)
        if Result > 0 and self.sample.get("U")[-1]-1 <= 0:
            self.sample.get("U")[-1] = 0
        elif Result > 0:
            self.sample["U"][-1] = self.sample.get("U")[-1]-Result*1
        Result, self.RemMol1 = self.AccTitration(self, 2, self.RemMol1)
        if Result > 0 and self.sample.get("U")[-1]-1 <= 0:
            self.sample.get("U")[-1] = 0
        elif Result > 0:
            self.sample["U"][-1] = self.sample.get("U")[-1]-Result*1
        if self.sample.get("U")[-1]<5.00:
            Result, self.RemMol2 = self.AccTitration(self, 3, self.RemMol2)
            if Result > 0 and self.sample.get("U")[-1]-1 <= 0:
                self.sample.get("U")[-1] = 0
            elif Result > 0:
                self.sample["U"][-1] = self.sample.get("U")[-1]-Result*1


    @staticmethod
    def Animate(i) :
        plt.cla()
        for i in range(SampleL.bitesize):
            index = next(SampleL.index)
            if len(SampleL.stepList) == 0:
                SampleL.stepList.append(index*SampleL.h)
            else:
                SampleL.stepList.append(index*SampleL.h)
                SampleL.Euler(SampleL, index)
                SampleL.ApplyTitration(SampleL)
                if(index >= SampleL.steps):
                    SampleL.stepList.pop()
                    break

        DrawGraph(SampleL.sample, SampleL.stepList, "L", index, SampleL.steps)
sample = {
    "II":[1],
    "A":[100],
    "B":[12]
}
SampleQ.sample["A"] = sample["A"]
SampleQ.index = count()
equilibrate(SampleQ, 0.0025, 1, 100, 1 )
sample["A"] = [SampleQ.sample.get("A")[-1]]
Species0, Steps0, name0, taken0 = SaveGraph(SampleQ, "Q", SampleQ.steps )
SampleL.index = count()
equilibrate(SampleL, 0.0025, 1, 100, 1 )
Species1, Steps1, name1, taken1 = SaveGraph(SampleL, "L", SampleL.steps )
SampleQ.sample = mix([SampleQ.sample])
def Euler0(self, i) :
    if(i < self.steps):
        r0=0.5+2.0*i*(self.sample.get("A")[-1]**1)
        r1=1*(self.sample.get("B")[-1]**1)
        r2=1*(self.sample.get("A")[-1]**1)*(self.sample.get("C")[-1]**1)
        r3=1*(self.sample.get("D")[-1]**1)
        r4=1*(self.sample.get("B")[-1]**1)*(self.sample.get("E")[-1]**1)
        r5=1*(self.sample.get("B")[-1]**1)*(self.sample.get("E")[-1]**1)
        r6=1*(self.sample.get("E")[-1]**1)

        self.sample["A"].append(self.sample.get("A")[-1]+(r0*(-1)+r1*(-1*(-1))+r2*(-1)+r5*(1))*self.h)
        self.sample["B"].append(self.sample.get("B")[-1]+(r0*(1)+r1*(1*(-1))+r3*(1)+r4*(1*(-1))+r5*(-1))*self.h)
        self.sample["C"].append(self.sample.get("C")[-1]+(r2*(-1)+r5*(1)+r6*(1))*self.h)
        self.sample["D"].append(self.sample.get("D")[-1]+(r2*(1)+r3*(-1)+r4*(-1*(-1)))*self.h)
        self.sample["E"].append(self.sample.get("E")[-1]+(r3*(1)+r4*(1*(-1))+r5*(-1)+r6*(-1))*self.h)

SampleQ.Euler = Euler0
def ApplyTitration0(self):
    pass
SampleQ.ApplyTitration = ApplyTitration0
split(SampleQ.sample,[SampleQ.sample, SampleL.sample], [0.5, 0.5])
disposePercent(SampleQ.sample,1)
count = 1
def onclick(event):
    global count
    event.canvas.figure.clear()
    plt.clf()
    if count % 2 == 0:
        DrawGraph(Species0, Steps0, name0, len(Steps0), taken0)
    else:
        DrawGraph(Species1, Steps1, name1, len(Steps1), taken1)
    count += 1
    if count % 2 == 0:
        count -= 2
    event.canvas.draw()

fig = plt.figure()
fig.canvas.mpl_connect('button_press_event', onclick)

DrawGraph(Species0, Steps0, name0, len(Steps0), taken0)

plt.show()
