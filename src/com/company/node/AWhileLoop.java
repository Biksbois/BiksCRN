/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.node;

import com.company.analysis.*;

@SuppressWarnings("nls")
public final class AWhileLoop extends PLoop
{
    private TTWhiledcl _tWhiledcl_;
    private TTLParen _tLParen_;
    private PLogicalExprs _logicalExprs_;
    private TTRParen _tRParen_;

    public AWhileLoop()
    {
        // Constructor
    }

    public AWhileLoop(
        @SuppressWarnings("hiding") TTWhiledcl _tWhiledcl_,
        @SuppressWarnings("hiding") TTLParen _tLParen_,
        @SuppressWarnings("hiding") PLogicalExprs _logicalExprs_,
        @SuppressWarnings("hiding") TTRParen _tRParen_)
    {
        // Constructor
        setTWhiledcl(_tWhiledcl_);

        setTLParen(_tLParen_);

        setLogicalExprs(_logicalExprs_);

        setTRParen(_tRParen_);

    }

    @Override
    public Object clone()
    {
        return new AWhileLoop(
            cloneNode(this._tWhiledcl_),
            cloneNode(this._tLParen_),
            cloneNode(this._logicalExprs_),
            cloneNode(this._tRParen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileLoop(this);
    }

    public TTWhiledcl getTWhiledcl()
    {
        return this._tWhiledcl_;
    }

    public void setTWhiledcl(TTWhiledcl node)
    {
        if(this._tWhiledcl_ != null)
        {
            this._tWhiledcl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tWhiledcl_ = node;
    }

    public TTLParen getTLParen()
    {
        return this._tLParen_;
    }

    public void setTLParen(TTLParen node)
    {
        if(this._tLParen_ != null)
        {
            this._tLParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLParen_ = node;
    }

    public PLogicalExprs getLogicalExprs()
    {
        return this._logicalExprs_;
    }

    public void setLogicalExprs(PLogicalExprs node)
    {
        if(this._logicalExprs_ != null)
        {
            this._logicalExprs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicalExprs_ = node;
    }

    public TTRParen getTRParen()
    {
        return this._tRParen_;
    }

    public void setTRParen(TTRParen node)
    {
        if(this._tRParen_ != null)
        {
            this._tRParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tWhiledcl_)
            + toString(this._tLParen_)
            + toString(this._logicalExprs_)
            + toString(this._tRParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tWhiledcl_ == child)
        {
            this._tWhiledcl_ = null;
            return;
        }

        if(this._tLParen_ == child)
        {
            this._tLParen_ = null;
            return;
        }

        if(this._logicalExprs_ == child)
        {
            this._logicalExprs_ = null;
            return;
        }

        if(this._tRParen_ == child)
        {
            this._tRParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tWhiledcl_ == oldChild)
        {
            setTWhiledcl((TTWhiledcl) newChild);
            return;
        }

        if(this._tLParen_ == oldChild)
        {
            setTLParen((TTLParen) newChild);
            return;
        }

        if(this._logicalExprs_ == oldChild)
        {
            setLogicalExprs((PLogicalExprs) newChild);
            return;
        }

        if(this._tRParen_ == oldChild)
        {
            setTRParen((TTRParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
