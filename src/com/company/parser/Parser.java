/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.parser;

import com.company.lexer.*;
import com.company.node.*;
import com.company.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AMainProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAinitializedclinit1Init */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAinitializedclinit2Init */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ARateinitInitializebody */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AFuncinitInitializebody */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ASpeciesinitInitializebody */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce ANumberinitInitializebody */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AAltervalueInitializebody */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce ASampleinitInitializebody */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce AStringAltervalue */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AFloatNumber */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AIntNumber */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce AMultipleFloats */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce ANoneFloats */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AMultipleIntegers */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce ANoneIntegers */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce ASingleSpecies */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AMultipleSpecie */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce ASingleSpecie */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce ALambdaFuncFunc */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce AMultiInput */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce AVoidInput */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce ASingleInput */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce AFloatType */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce ARateType */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce AIntType */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce ADclRate */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce AMultipleRates */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce ASingleRates */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce ATermExpression */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list, false);
            }
            break;
            case 30: /* reduce AOperatorExpression */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AExpressoinDouble */
            {
                ArrayList<Object> list = new31();
                push(goTo(15), list, false);
            }
            break;
            case 32: /* reduce APlusOperator */
            {
                ArrayList<Object> list = new32();
                push(goTo(16), list, false);
            }
            break;
            case 33: /* reduce AMinusOperator */
            {
                ArrayList<Object> list = new33();
                push(goTo(16), list, false);
            }
            break;
            case 34: /* reduce AFactorTerm */
            {
                ArrayList<Object> list = new34();
                push(goTo(17), list, false);
            }
            break;
            case 35: /* reduce AMultTerm */
            {
                ArrayList<Object> list = new35();
                push(goTo(17), list, false);
            }
            break;
            case 36: /* reduce ADivideTerm */
            {
                ArrayList<Object> list = new36();
                push(goTo(17), list, false);
            }
            break;
            case 37: /* reduce AOptermPower */
            {
                ArrayList<Object> list = new37();
                push(goTo(18), list, false);
            }
            break;
            case 38: /* reduce AParenPower */
            {
                ArrayList<Object> list = new38();
                push(goTo(18), list, false);
            }
            break;
            case 39: /* reduce AParentesesParen */
            {
                ArrayList<Object> list = new39();
                push(goTo(19), list, false);
            }
            break;
            case 40: /* reduce AFactorParen */
            {
                ArrayList<Object> list = new40();
                push(goTo(19), list, false);
            }
            break;
            case 41: /* reduce APositivePolarity */
            {
                ArrayList<Object> list = new41();
                push(goTo(20), list, false);
            }
            break;
            case 42: /* reduce ANegativeParenPolarity */
            {
                ArrayList<Object> list = new42();
                push(goTo(20), list, false);
            }
            break;
            case 43: /* reduce AIntegerFactor */
            {
                ArrayList<Object> list = new43();
                push(goTo(21), list, false);
            }
            break;
            case 44: /* reduce AVariableFactor */
            {
                ArrayList<Object> list = new44();
                push(goTo(21), list, false);
            }
            break;
            case 45: /* reduce AFloatFactor */
            {
                ArrayList<Object> list = new45();
                push(goTo(21), list, false);
            }
            break;
            case 46: /* reduce AFactorPowerIn */
            {
                ArrayList<Object> list = new46();
                push(goTo(22), list, false);
            }
            break;
            case 47: /* reduce AExpressionPowerIn */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list, false);
            }
            break;
            case 48: /* reduce AWhileLoop */
            {
                ArrayList<Object> list = new48();
                push(goTo(23), list, false);
            }
            break;
            case 49: /* reduce ASingleLogicalExprs */
            {
                ArrayList<Object> list = new49();
                push(goTo(24), list, false);
            }
            break;
            case 50: /* reduce AMultipleLogicalExprs */
            {
                ArrayList<Object> list = new50();
                push(goTo(24), list, false);
            }
            break;
            case 51: /* reduce ASingleLogicalExpr */
            {
                ArrayList<Object> list = new51();
                push(goTo(25), list, false);
            }
            break;
            case 52: /* reduce AOrBoolOperator */
            {
                ArrayList<Object> list = new52();
                push(goTo(26), list, false);
            }
            break;
            case 53: /* reduce AAndBoolOperator */
            {
                ArrayList<Object> list = new53();
                push(goTo(26), list, false);
            }
            break;
            case 54: /* reduce AGreaterEqualLogicalOperator */
            {
                ArrayList<Object> list = new54();
                push(goTo(27), list, false);
            }
            break;
            case 55: /* reduce ASmallerEqualLogicalOperator */
            {
                ArrayList<Object> list = new55();
                push(goTo(27), list, false);
            }
            break;
            case 56: /* reduce AGreaterLogicalOperator */
            {
                ArrayList<Object> list = new56();
                push(goTo(27), list, false);
            }
            break;
            case 57: /* reduce ASmallerLogicalOperator */
            {
                ArrayList<Object> list = new57();
                push(goTo(27), list, false);
            }
            break;
            case 58: /* reduce AEqualLogicalOperator */
            {
                ArrayList<Object> list = new58();
                push(goTo(27), list, false);
            }
            break;
            case 59: /* reduce ANotLogicalOperator */
            {
                ArrayList<Object> list = new59();
                push(goTo(27), list, false);
            }
            break;
            case 60: /* reduce ANotEqualLogicalOperator */
            {
                ArrayList<Object> list = new60();
                push(goTo(27), list, false);
            }
            break;
            case 61: /* reduce ADclTitration */
            {
                ArrayList<Object> list = new61();
                push(goTo(28), list, false);
            }
            break;
            case 62: /* reduce ASingleTitrations */
            {
                ArrayList<Object> list = new62();
                push(goTo(29), list, false);
            }
            break;
            case 63: /* reduce AMultipleTitrations */
            {
                ArrayList<Object> list = new63();
                push(goTo(29), list, false);
            }
            break;
            case 64: /* reduce ALoopTitrationEnd */
            {
                ArrayList<Object> list = new64();
                push(goTo(30), list, false);
            }
            break;
            case 65: /* reduce ASemicolonTitrationEnd */
            {
                ArrayList<Object> list = new65();
                push(goTo(30), list, false);
            }
            break;
            case 66: /* reduce ALoopTitrationContinue */
            {
                ArrayList<Object> list = new66();
                push(goTo(31), list, false);
            }
            break;
            case 67: /* reduce ACommaTitrationContinue */
            {
                ArrayList<Object> list = new67();
                push(goTo(31), list, false);
            }
            break;
            case 68: /* reduce ARemoveTitrationdcl */
            {
                ArrayList<Object> list = new68();
                push(goTo(32), list, false);
            }
            break;
            case 69: /* reduce AAddTitrationdcl */
            {
                ArrayList<Object> list = new69();
                push(goTo(32), list, false);
            }
            break;
            case 70: /* reduce ADoubleReaction */
            {
                ArrayList<Object> list = new70();
                push(goTo(33), list, false);
            }
            break;
            case 71: /* reduce AMultipleReactant */
            {
                ArrayList<Object> list = new71();
                push(goTo(34), list, false);
            }
            break;
            case 72: /* reduce APlusReactant */
            {
                ArrayList<Object> list = new72();
                push(goTo(34), list, false);
            }
            break;
            case 73: /* reduce AStringReactant */
            {
                ArrayList<Object> list = new73();
                push(goTo(34), list, false);
            }
            break;
            case 74: /* reduce ASingleReactant */
            {
                ArrayList<Object> list = new74();
                push(goTo(34), list, false);
            }
            break;
            case 75: /* reduce AOneWayArrows */
            {
                ArrayList<Object> list = new75();
                push(goTo(35), list, false);
            }
            break;
            case 76: /* reduce ATwoWayArrows */
            {
                ArrayList<Object> list = new76();
                push(goTo(35), list, false);
            }
            break;
            case 77: /* reduce AFuncReactionRateI */
            {
                ArrayList<Object> list = new77();
                push(goTo(36), list, false);
            }
            break;
            case 78: /* reduce AUnitReactionRateI */
            {
                ArrayList<Object> list = new78();
                push(goTo(36), list, false);
            }
            break;
            case 79: /* reduce AReactionRateReactionRateIi */
            {
                ArrayList<Object> list = new79();
                push(goTo(37), list, false);
            }
            break;
            case 80: /* reduce AFCallFuncCall */
            {
                ArrayList<Object> list = new80();
                push(goTo(38), list, false);
            }
            break;
            case 81: /* reduce AWithParamFuncParen */
            {
                ArrayList<Object> list = new81();
                push(goTo(39), list, false);
            }
            break;
            case 82: /* reduce ANoParamFuncParen */
            {
                ArrayList<Object> list = new82();
                push(goTo(39), list, false);
            }
            break;
            case 83: /* reduce ASingleFuncParameters */
            {
                ArrayList<Object> list = new83();
                push(goTo(40), list, false);
            }
            break;
            case 84: /* reduce AMultipleFuncParameters */
            {
                ArrayList<Object> list = new84();
                push(goTo(40), list, false);
            }
            break;
            case 85: /* reduce ASingleCrn */
            {
                ArrayList<Object> list = new85();
                push(goTo(41), list, false);
            }
            break;
            case 86: /* reduce AAblockcrnfunc1Crnfunc */
            {
                ArrayList<Object> list = new86();
                push(goTo(42), list, false);
            }
            break;
            case 87: /* reduce AAblockcrnfunc2Crnfunc */
            {
                ArrayList<Object> list = new87();
                push(goTo(42), list, false);
            }
            break;
            case 88: /* reduce ASampleinitSample */
            {
                ArrayList<Object> list = new88();
                push(goTo(43), list, false);
            }
            break;
            case 89: /* reduce AAbodysamplefunc1Samplefunc */
            {
                ArrayList<Object> list = new89();
                push(goTo(44), list, false);
            }
            break;
            case 90: /* reduce AAbodysamplefunc2Samplefunc */
            {
                ArrayList<Object> list = new90();
                push(goTo(44), list, false);
            }
            break;
            case 91: /* reduce ARateSamplebody */
            {
                ArrayList<Object> list = new91();
                push(goTo(45), list, false);
            }
            break;
            case 92: /* reduce ANumberinitSamplebody */
            {
                ArrayList<Object> list = new92();
                push(goTo(45), list, false);
            }
            break;
            case 93: /* reduce AAltervalueSamplebody */
            {
                ArrayList<Object> list = new93();
                push(goTo(45), list, false);
            }
            break;
            case 94: /* reduce ASpeciesSamplebody */
            {
                ArrayList<Object> list = new94();
                push(goTo(45), list, false);
            }
            break;
            case 95: /* reduce AFuncSamplebody */
            {
                ArrayList<Object> list = new95();
                push(goTo(45), list, false);
            }
            break;
            case 96: /* reduce ACrnSamplebody */
            {
                ArrayList<Object> list = new96();
                push(goTo(45), list, false);
            }
            break;
            case 97: /* reduce ATitsSamplebody */
            {
                ArrayList<Object> list = new97();
                push(goTo(45), list, false);
            }
            break;
            case 98: /* reduce AAdclprotocol1Protocol */
            {
                ArrayList<Object> list = new98();
                push(goTo(46), list, false);
            }
            break;
            case 99: /* reduce AAdclprotocol2Protocol */
            {
                ArrayList<Object> list = new99();
                push(goTo(46), list, false);
            }
            break;
            case 100: /* reduce AEquiliProtocolbody */
            {
                ArrayList<Object> list = new100();
                push(goTo(47), list, false);
            }
            break;
            case 101: /* reduce ASampleProtocolbody */
            {
                ArrayList<Object> list = new101();
                push(goTo(47), list, false);
            }
            break;
            case 102: /* reduce ADisposeProtocolbody */
            {
                ArrayList<Object> list = new102();
                push(goTo(47), list, false);
            }
            break;
            case 103: /* reduce ANonzeroDisposePara */
            {
                ArrayList<Object> list = new103();
                push(goTo(48), list, false);
            }
            break;
            case 104: /* reduce ANoneDisposePara */
            {
                ArrayList<Object> list = new104();
                push(goTo(48), list, false);
            }
            break;
            case 105: /* reduce AMixSampleref */
            {
                ArrayList<Object> list = new105();
                push(goTo(49), list, false);
            }
            break;
            case 106: /* reduce ASplitSampleref */
            {
                ArrayList<Object> list = new106();
                push(goTo(49), list, false);
            }
            break;
            case 107: /* reduce AMultiProtocolparam */
            {
                ArrayList<Object> list = new107();
                push(goTo(50), list, false);
            }
            break;
            case 108: /* reduce ASingleProtocolparam */
            {
                ArrayList<Object> list = new108();
                push(goTo(50), list, false);
            }
            break;
            case 109: /* reduce AMultiProtoexstend */
            {
                ArrayList<Object> list = new109();
                push(goTo(51), list, false);
            }
            break;
            case 110: /* reduce ASingleProtoexstend */
            {
                ArrayList<Object> list = new110();
                push(goTo(51), list, false);
            }
            break;
            case 111: /* reduce ASingleEquili */
            {
                ArrayList<Object> list = new111();
                push(goTo(52), list, false);
            }
            break;
            case 112: /* reduce ATimeOption */
            {
                ArrayList<Object> list = new112();
                push(goTo(53), list, false);
            }
            break;
            case 113: /* reduce ACycleOption */
            {
                ArrayList<Object> list = new113();
                push(goTo(53), list, false);
            }
            break;
            case 114: /* reduce ASemiExtendequili */
            {
                ArrayList<Object> list = new114();
                push(goTo(54), list, false);
            }
            break;
            case 115: /* reduce AStepExtendequili */
            {
                ArrayList<Object> list = new115();
                push(goTo(54), list, false);
            }
            break;
            case 116: /* reduce AWithTimestep */
            {
                ArrayList<Object> list = new116();
                push(goTo(55), list, false);
            }
            break;
            case 117: /* reduce ANoTimestep */
            {
                ArrayList<Object> list = new117();
                push(goTo(55), list, false);
            }
            break;
            case 118: /* reduce ATerminal$Initializebody */
            {
                ArrayList<Object> list = new118();
                push(goTo(56), list, true);
            }
            break;
            case 119: /* reduce ANonTerminal$Initializebody */
            {
                ArrayList<Object> list = new119();
                push(goTo(56), list, true);
            }
            break;
            case 120: /* reduce ATerminal$Reaction */
            {
                ArrayList<Object> list = new120();
                push(goTo(57), list, true);
            }
            break;
            case 121: /* reduce ANonTerminal$Reaction */
            {
                ArrayList<Object> list = new121();
                push(goTo(57), list, true);
            }
            break;
            case 122: /* reduce ATerminal$Samplebody */
            {
                ArrayList<Object> list = new122();
                push(goTo(58), list, true);
            }
            break;
            case 123: /* reduce ANonTerminal$Samplebody */
            {
                ArrayList<Object> list = new123();
                push(goTo(58), list, true);
            }
            break;
            case 124: /* reduce ATerminal$Protocolbody */
            {
                ArrayList<Object> list = new124();
                push(goTo(59), list, true);
            }
            break;
            case 125: /* reduce ANonTerminal$Protocolbody */
            {
                ArrayList<Object> list = new125();
                push(goTo(59), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AMainProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PInit pinitNode2;
        PProtocol pprotocolNode3;
        pinitNode2 = (PInit)nodeArrayList1.get(0);
        pprotocolNode3 = (PProtocol)nodeArrayList2.get(0);

        pprogramNode1 = new AMainProgram(pinitNode2, pprotocolNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAinitializedclinit1Init */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInit pinitNode1;
        {
            // Block
        TTInitializedcl ttinitializedclNode2;
        TTLTurborg ttlturborgNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TTRTurborg ttrturborgNode5;
        ttinitializedclNode2 = (TTInitializedcl)nodeArrayList1.get(0);
        ttlturborgNode3 = (TTLTurborg)nodeArrayList2.get(0);
        {
            // Block
        }
        ttrturborgNode5 = (TTRTurborg)nodeArrayList3.get(0);

        pinitNode1 = new AInitializedclInit(ttinitializedclNode2, ttlturborgNode3, listNode4, ttrturborgNode5);
        }
	nodeList.add(pinitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAinitializedclinit2Init */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInit pinitNode1;
        {
            // Block
        TTInitializedcl ttinitializedclNode2;
        TTLTurborg ttlturborgNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TTRTurborg ttrturborgNode6;
        ttinitializedclNode2 = (TTInitializedcl)nodeArrayList1.get(0);
        ttlturborgNode3 = (TTLTurborg)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        ttrturborgNode6 = (TTRTurborg)nodeArrayList4.get(0);

        pinitNode1 = new AInitializedclInit(ttinitializedclNode2, ttlturborgNode3, listNode5, ttrturborgNode6);
        }
	nodeList.add(pinitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ARateinitInitializebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitializebody pinitializebodyNode1;
        {
            // Block
        PRate prateNode2;
        prateNode2 = (PRate)nodeArrayList1.get(0);

        pinitializebodyNode1 = new ARateinitInitializebody(prateNode2);
        }
	nodeList.add(pinitializebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFuncinitInitializebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitializebody pinitializebodyNode1;
        {
            // Block
        PFunc pfuncNode2;
        pfuncNode2 = (PFunc)nodeArrayList1.get(0);

        pinitializebodyNode1 = new AFuncinitInitializebody(pfuncNode2);
        }
	nodeList.add(pinitializebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ASpeciesinitInitializebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitializebody pinitializebodyNode1;
        {
            // Block
        PSpecies pspeciesNode2;
        pspeciesNode2 = (PSpecies)nodeArrayList1.get(0);

        pinitializebodyNode1 = new ASpeciesinitInitializebody(pspeciesNode2);
        }
	nodeList.add(pinitializebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ANumberinitInitializebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitializebody pinitializebodyNode1;
        {
            // Block
        PNumber pnumberNode2;
        pnumberNode2 = (PNumber)nodeArrayList1.get(0);

        pinitializebodyNode1 = new ANumberinitInitializebody(pnumberNode2);
        }
	nodeList.add(pinitializebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAltervalueInitializebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitializebody pinitializebodyNode1;
        {
            // Block
        PAltervalue paltervalueNode2;
        paltervalueNode2 = (PAltervalue)nodeArrayList1.get(0);

        pinitializebodyNode1 = new AAltervalueInitializebody(paltervalueNode2);
        }
	nodeList.add(pinitializebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ASampleinitInitializebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInitializebody pinitializebodyNode1;
        {
            // Block
        PSample psampleNode2;
        psampleNode2 = (PSample)nodeArrayList1.get(0);

        pinitializebodyNode1 = new ASampleinitInitializebody(psampleNode2);
        }
	nodeList.add(pinitializebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AStringAltervalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAltervalue paltervalueNode1;
        {
            // Block
        TTString ttstringNode2;
        TTEqual ttequalNode3;
        PExpression pexpressionNode4;
        TTSemicolon ttsemicolonNode5;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);
        ttequalNode3 = (TTEqual)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        ttsemicolonNode5 = (TTSemicolon)nodeArrayList4.get(0);

        paltervalueNode1 = new AStringAltervalue(ttstringNode2, ttequalNode3, pexpressionNode4, ttsemicolonNode5);
        }
	nodeList.add(paltervalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AFloatNumber */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumber pnumberNode1;
        {
            // Block
        TTFloatType ttfloattypeNode2;
        TTString ttstringNode3;
        TTEqual ttequalNode4;
        PExpression pexpressionNode5;
        PFloats pfloatsNode6;
        ttfloattypeNode2 = (TTFloatType)nodeArrayList1.get(0);
        ttstringNode3 = (TTString)nodeArrayList2.get(0);
        ttequalNode4 = (TTEqual)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        pfloatsNode6 = (PFloats)nodeArrayList5.get(0);

        pnumberNode1 = new AFloatNumber(ttfloattypeNode2, ttstringNode3, ttequalNode4, pexpressionNode5, pfloatsNode6);
        }
	nodeList.add(pnumberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AIntNumber */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumber pnumberNode1;
        {
            // Block
        TTIntType ttinttypeNode2;
        TTString ttstringNode3;
        TTEqual ttequalNode4;
        PExpression pexpressionNode5;
        PIntegers pintegersNode6;
        ttinttypeNode2 = (TTIntType)nodeArrayList1.get(0);
        ttstringNode3 = (TTString)nodeArrayList2.get(0);
        ttequalNode4 = (TTEqual)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        pintegersNode6 = (PIntegers)nodeArrayList5.get(0);

        pnumberNode1 = new AIntNumber(ttinttypeNode2, ttstringNode3, ttequalNode4, pexpressionNode5, pintegersNode6);
        }
	nodeList.add(pnumberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AMultipleFloats */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFloats pfloatsNode1;
        {
            // Block
        TTComma ttcommaNode2;
        TTString ttstringNode3;
        TTEqual ttequalNode4;
        PExpression pexpressionNode5;
        PFloats pfloatsNode6;
        ttcommaNode2 = (TTComma)nodeArrayList1.get(0);
        ttstringNode3 = (TTString)nodeArrayList2.get(0);
        ttequalNode4 = (TTEqual)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        pfloatsNode6 = (PFloats)nodeArrayList5.get(0);

        pfloatsNode1 = new AMultipleFloats(ttcommaNode2, ttstringNode3, ttequalNode4, pexpressionNode5, pfloatsNode6);
        }
	nodeList.add(pfloatsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ANoneFloats */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFloats pfloatsNode1;
        {
            // Block
        TTSemicolon ttsemicolonNode2;
        ttsemicolonNode2 = (TTSemicolon)nodeArrayList1.get(0);

        pfloatsNode1 = new ANoneFloats(ttsemicolonNode2);
        }
	nodeList.add(pfloatsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AMultipleIntegers */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIntegers pintegersNode1;
        {
            // Block
        TTComma ttcommaNode2;
        TTString ttstringNode3;
        TTEqual ttequalNode4;
        PExpression pexpressionNode5;
        PIntegers pintegersNode6;
        ttcommaNode2 = (TTComma)nodeArrayList1.get(0);
        ttstringNode3 = (TTString)nodeArrayList2.get(0);
        ttequalNode4 = (TTEqual)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        pintegersNode6 = (PIntegers)nodeArrayList5.get(0);

        pintegersNode1 = new AMultipleIntegers(ttcommaNode2, ttstringNode3, ttequalNode4, pexpressionNode5, pintegersNode6);
        }
	nodeList.add(pintegersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANoneIntegers */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIntegers pintegersNode1;
        {
            // Block
        TTSemicolon ttsemicolonNode2;
        ttsemicolonNode2 = (TTSemicolon)nodeArrayList1.get(0);

        pintegersNode1 = new ANoneIntegers(ttsemicolonNode2);
        }
	nodeList.add(pintegersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASingleSpecies */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecies pspeciesNode1;
        {
            // Block
        TTSpeciesdcl ttspeciesdclNode2;
        PSpecie pspecieNode3;
        ttspeciesdclNode2 = (TTSpeciesdcl)nodeArrayList1.get(0);
        pspecieNode3 = (PSpecie)nodeArrayList2.get(0);

        pspeciesNode1 = new ASingleSpecies(ttspeciesdclNode2, pspecieNode3);
        }
	nodeList.add(pspeciesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AMultipleSpecie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecie pspecieNode1;
        {
            // Block
        TTString ttstringNode2;
        TTEqual ttequalNode3;
        PExpression pexpressionNode4;
        TTComma ttcommaNode5;
        PSpecie pspecieNode6;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);
        ttequalNode3 = (TTEqual)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        ttcommaNode5 = (TTComma)nodeArrayList4.get(0);
        pspecieNode6 = (PSpecie)nodeArrayList5.get(0);

        pspecieNode1 = new AMultipleSpecie(ttstringNode2, ttequalNode3, pexpressionNode4, ttcommaNode5, pspecieNode6);
        }
	nodeList.add(pspecieNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ASingleSpecie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSpecie pspecieNode1;
        {
            // Block
        TTString ttstringNode2;
        TTEqual ttequalNode3;
        PExpression pexpressionNode4;
        TTSemicolon ttsemicolonNode5;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);
        ttequalNode3 = (TTEqual)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        ttsemicolonNode5 = (TTSemicolon)nodeArrayList4.get(0);

        pspecieNode1 = new ASingleSpecie(ttstringNode2, ttequalNode3, pexpressionNode4, ttsemicolonNode5);
        }
	nodeList.add(pspecieNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ALambdaFuncFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TTFuncdcl ttfuncdclNode2;
        TTString ttstringNode3;
        TTLParen ttlparenNode4;
        PInput pinputNode5;
        TTRParen ttrparenNode6;
        TTLambda ttlambdaNode7;
        PExpression pexpressionNode8;
        TTSemicolon ttsemicolonNode9;
        ttfuncdclNode2 = (TTFuncdcl)nodeArrayList1.get(0);
        ttstringNode3 = (TTString)nodeArrayList2.get(0);
        ttlparenNode4 = (TTLParen)nodeArrayList3.get(0);
        pinputNode5 = (PInput)nodeArrayList4.get(0);
        ttrparenNode6 = (TTRParen)nodeArrayList5.get(0);
        ttlambdaNode7 = (TTLambda)nodeArrayList6.get(0);
        pexpressionNode8 = (PExpression)nodeArrayList7.get(0);
        ttsemicolonNode9 = (TTSemicolon)nodeArrayList8.get(0);

        pfuncNode1 = new ALambdaFuncFunc(ttfuncdclNode2, ttstringNode3, ttlparenNode4, pinputNode5, ttrparenNode6, ttlambdaNode7, pexpressionNode8, ttsemicolonNode9);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AMultiInput */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInput pinputNode1;
        {
            // Block
        PType ptypeNode2;
        TTString ttstringNode3;
        TTComma ttcommaNode4;
        PInput pinputNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        ttstringNode3 = (TTString)nodeArrayList2.get(0);
        ttcommaNode4 = (TTComma)nodeArrayList3.get(0);
        pinputNode5 = (PInput)nodeArrayList4.get(0);

        pinputNode1 = new AMultiInput(ptypeNode2, ttstringNode3, ttcommaNode4, pinputNode5);
        }
	nodeList.add(pinputNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AVoidInput */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInput pinputNode1;
        {
            // Block
        TTVoiddcl ttvoiddclNode2;
        ttvoiddclNode2 = (TTVoiddcl)nodeArrayList1.get(0);

        pinputNode1 = new AVoidInput(ttvoiddclNode2);
        }
	nodeList.add(pinputNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASingleInput */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInput pinputNode1;
        {
            // Block
        PType ptypeNode2;
        TTString ttstringNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        ttstringNode3 = (TTString)nodeArrayList2.get(0);

        pinputNode1 = new ASingleInput(ptypeNode2, ttstringNode3);
        }
	nodeList.add(pinputNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFloatType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTFloatType ttfloattypeNode2;
        ttfloattypeNode2 = (TTFloatType)nodeArrayList1.get(0);

        ptypeNode1 = new AFloatType(ttfloattypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ARateType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTRateType ttratetypeNode2;
        ttratetypeNode2 = (TTRateType)nodeArrayList1.get(0);

        ptypeNode1 = new ARateType(ttratetypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTIntType ttinttypeNode2;
        ttinttypeNode2 = (TTIntType)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(ttinttypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ADclRate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRate prateNode1;
        {
            // Block
        TTRatedcl ttratedclNode2;
        PRates pratesNode3;
        ttratedclNode2 = (TTRatedcl)nodeArrayList1.get(0);
        pratesNode3 = (PRates)nodeArrayList2.get(0);

        prateNode1 = new ADclRate(ttratedclNode2, pratesNode3);
        }
	nodeList.add(prateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AMultipleRates */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRates pratesNode1;
        {
            // Block
        TTString ttstringNode2;
        TTEqual ttequalNode3;
        TTFloat ttfloatNode4;
        TTComma ttcommaNode5;
        PRates pratesNode6;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);
        ttequalNode3 = (TTEqual)nodeArrayList2.get(0);
        ttfloatNode4 = (TTFloat)nodeArrayList3.get(0);
        ttcommaNode5 = (TTComma)nodeArrayList4.get(0);
        pratesNode6 = (PRates)nodeArrayList5.get(0);

        pratesNode1 = new AMultipleRates(ttstringNode2, ttequalNode3, ttfloatNode4, ttcommaNode5, pratesNode6);
        }
	nodeList.add(pratesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ASingleRates */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRates pratesNode1;
        {
            // Block
        TTString ttstringNode2;
        TTEqual ttequalNode3;
        TTFloat ttfloatNode4;
        TTSemicolon ttsemicolonNode5;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);
        ttequalNode3 = (TTEqual)nodeArrayList2.get(0);
        ttfloatNode4 = (TTFloat)nodeArrayList3.get(0);
        ttsemicolonNode5 = (TTSemicolon)nodeArrayList4.get(0);

        pratesNode1 = new ASingleRates(ttstringNode2, ttequalNode3, ttfloatNode4, ttsemicolonNode5);
        }
	nodeList.add(pratesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ATermExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexpressionNode1 = new ATermExpression(ptermNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AOperatorExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        POperator poperatorNode3;
        PExpression pexpressionNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        poperatorNode3 = (POperator)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AOperatorExpression(ptermNode2, poperatorNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AExpressoinDouble */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDouble pdoubleNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pdoubleNode1 = new AExpressoinDouble(pexpressionNode2);
        }
	nodeList.add(pdoubleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce APlusOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TTPlus ttplusNode2;
        ttplusNode2 = (TTPlus)nodeArrayList1.get(0);

        poperatorNode1 = new APlusOperator(ttplusNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMinusOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TTMinus ttminusNode2;
        ttminusNode2 = (TTMinus)nodeArrayList1.get(0);

        poperatorNode1 = new AMinusOperator(ttminusNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PPower ppowerNode2;
        ppowerNode2 = (PPower)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(ppowerNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PPower ppowerNode2;
        TTMult ttmultNode3;
        PTerm ptermNode4;
        ppowerNode2 = (PPower)nodeArrayList1.get(0);
        ttmultNode3 = (TTMult)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        ptermNode1 = new AMultTerm(ppowerNode2, ttmultNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ADivideTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PPower ppowerNode2;
        TTDiv ttdivNode3;
        PTerm ptermNode4;
        ppowerNode2 = (PPower)nodeArrayList1.get(0);
        ttdivNode3 = (TTDiv)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        ptermNode1 = new ADivideTerm(ppowerNode2, ttdivNode3, ptermNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AOptermPower */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPower ppowerNode1;
        {
            // Block
        PParen pparenNode2;
        TTPower ttpowerNode3;
        PPowerIn ppowerinNode4;
        pparenNode2 = (PParen)nodeArrayList1.get(0);
        ttpowerNode3 = (TTPower)nodeArrayList2.get(0);
        ppowerinNode4 = (PPowerIn)nodeArrayList3.get(0);

        ppowerNode1 = new AOptermPower(pparenNode2, ttpowerNode3, ppowerinNode4);
        }
	nodeList.add(ppowerNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AParenPower */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPower ppowerNode1;
        {
            // Block
        PParen pparenNode2;
        pparenNode2 = (PParen)nodeArrayList1.get(0);

        ppowerNode1 = new AParenPower(pparenNode2);
        }
	nodeList.add(ppowerNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AParentesesParen */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParen pparenNode1;
        {
            // Block
        TTLParen ttlparenNode2;
        PExpression pexpressionNode3;
        TTRParen ttrparenNode4;
        ttlparenNode2 = (TTLParen)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        ttrparenNode4 = (TTRParen)nodeArrayList3.get(0);

        pparenNode1 = new AParentesesParen(ttlparenNode2, pexpressionNode3, ttrparenNode4);
        }
	nodeList.add(pparenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AFactorParen */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParen pparenNode1;
        {
            // Block
        PPolarity ppolarityNode2;
        ppolarityNode2 = (PPolarity)nodeArrayList1.get(0);

        pparenNode1 = new AFactorParen(ppolarityNode2);
        }
	nodeList.add(pparenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce APositivePolarity */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPolarity ppolarityNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ppolarityNode1 = new APositivePolarity(pfactorNode2);
        }
	nodeList.add(ppolarityNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ANegativeParenPolarity */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPolarity ppolarityNode1;
        {
            // Block
        TTLParen ttlparenNode2;
        TTMinus ttminusNode3;
        PFactor pfactorNode4;
        TTRParen ttrparenNode5;
        ttlparenNode2 = (TTLParen)nodeArrayList1.get(0);
        ttminusNode3 = (TTMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);
        ttrparenNode5 = (TTRParen)nodeArrayList4.get(0);

        ppolarityNode1 = new ANegativeParenPolarity(ttlparenNode2, ttminusNode3, pfactorNode4, ttrparenNode5);
        }
	nodeList.add(ppolarityNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AIntegerFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TTInt ttintNode2;
        ttintNode2 = (TTInt)nodeArrayList1.get(0);

        pfactorNode1 = new AIntegerFactor(ttintNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AVariableFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TTString ttstringNode2;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);

        pfactorNode1 = new AVariableFactor(ttstringNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AFloatFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TTFloat ttfloatNode2;
        ttfloatNode2 = (TTFloat)nodeArrayList1.get(0);

        pfactorNode1 = new AFloatFactor(ttfloatNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AFactorPowerIn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPowerIn ppowerinNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ppowerinNode1 = new AFactorPowerIn(pfactorNode2);
        }
	nodeList.add(ppowerinNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExpressionPowerIn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPowerIn ppowerinNode1;
        {
            // Block
        TTLParen ttlparenNode2;
        PExpression pexpressionNode3;
        TTRParen ttrparenNode4;
        ttlparenNode2 = (TTLParen)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        ttrparenNode4 = (TTRParen)nodeArrayList3.get(0);

        ppowerinNode1 = new AExpressionPowerIn(ttlparenNode2, pexpressionNode3, ttrparenNode4);
        }
	nodeList.add(ppowerinNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AWhileLoop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoop ploopNode1;
        {
            // Block
        TTWhiledcl ttwhiledclNode2;
        TTLParen ttlparenNode3;
        PLogicalExprs plogicalexprsNode4;
        TTRParen ttrparenNode5;
        ttwhiledclNode2 = (TTWhiledcl)nodeArrayList1.get(0);
        ttlparenNode3 = (TTLParen)nodeArrayList2.get(0);
        plogicalexprsNode4 = (PLogicalExprs)nodeArrayList3.get(0);
        ttrparenNode5 = (TTRParen)nodeArrayList4.get(0);

        ploopNode1 = new AWhileLoop(ttwhiledclNode2, ttlparenNode3, plogicalexprsNode4, ttrparenNode5);
        }
	nodeList.add(ploopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ASingleLogicalExprs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalExprs plogicalexprsNode1;
        {
            // Block
        PLogicalExpr plogicalexprNode2;
        plogicalexprNode2 = (PLogicalExpr)nodeArrayList1.get(0);

        plogicalexprsNode1 = new ASingleLogicalExprs(plogicalexprNode2);
        }
	nodeList.add(plogicalexprsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AMultipleLogicalExprs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalExprs plogicalexprsNode1;
        {
            // Block
        PLogicalExpr plogicalexprNode2;
        PBoolOperator pbooloperatorNode3;
        PLogicalExprs plogicalexprsNode4;
        plogicalexprNode2 = (PLogicalExpr)nodeArrayList1.get(0);
        pbooloperatorNode3 = (PBoolOperator)nodeArrayList2.get(0);
        plogicalexprsNode4 = (PLogicalExprs)nodeArrayList3.get(0);

        plogicalexprsNode1 = new AMultipleLogicalExprs(plogicalexprNode2, pbooloperatorNode3, plogicalexprsNode4);
        }
	nodeList.add(plogicalexprsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ASingleLogicalExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalExpr plogicalexprNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PLogicalOperator plogicaloperatorNode3;
        PDouble pdoubleNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        plogicaloperatorNode3 = (PLogicalOperator)nodeArrayList2.get(0);
        pdoubleNode4 = (PDouble)nodeArrayList3.get(0);

        plogicalexprNode1 = new ASingleLogicalExpr(pexpressionNode2, plogicaloperatorNode3, pdoubleNode4);
        }
	nodeList.add(plogicalexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AOrBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TTOr ttorNode2;
        ttorNode2 = (TTOr)nodeArrayList1.get(0);

        pbooloperatorNode1 = new AOrBoolOperator(ttorNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAndBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TTAnd ttandNode2;
        ttandNode2 = (TTAnd)nodeArrayList1.get(0);

        pbooloperatorNode1 = new AAndBoolOperator(ttandNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AGreaterEqualLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalOperator plogicaloperatorNode1;
        {
            // Block
        TTEqualOrGreater ttequalorgreaterNode2;
        ttequalorgreaterNode2 = (TTEqualOrGreater)nodeArrayList1.get(0);

        plogicaloperatorNode1 = new AGreaterEqualLogicalOperator(ttequalorgreaterNode2);
        }
	nodeList.add(plogicaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ASmallerEqualLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalOperator plogicaloperatorNode1;
        {
            // Block
        TTEqualOrSmaller ttequalorsmallerNode2;
        ttequalorsmallerNode2 = (TTEqualOrSmaller)nodeArrayList1.get(0);

        plogicaloperatorNode1 = new ASmallerEqualLogicalOperator(ttequalorsmallerNode2);
        }
	nodeList.add(plogicaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AGreaterLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalOperator plogicaloperatorNode1;
        {
            // Block
        TTGreater ttgreaterNode2;
        ttgreaterNode2 = (TTGreater)nodeArrayList1.get(0);

        plogicaloperatorNode1 = new AGreaterLogicalOperator(ttgreaterNode2);
        }
	nodeList.add(plogicaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ASmallerLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalOperator plogicaloperatorNode1;
        {
            // Block
        TTSmaller ttsmallerNode2;
        ttsmallerNode2 = (TTSmaller)nodeArrayList1.get(0);

        plogicaloperatorNode1 = new ASmallerLogicalOperator(ttsmallerNode2);
        }
	nodeList.add(plogicaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AEqualLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalOperator plogicaloperatorNode1;
        {
            // Block
        TTLogicalEqual ttlogicalequalNode2;
        ttlogicalequalNode2 = (TTLogicalEqual)nodeArrayList1.get(0);

        plogicaloperatorNode1 = new AEqualLogicalOperator(ttlogicalequalNode2);
        }
	nodeList.add(plogicaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ANotLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalOperator plogicaloperatorNode1;
        {
            // Block
        TTNot ttnotNode2;
        ttnotNode2 = (TTNot)nodeArrayList1.get(0);

        plogicaloperatorNode1 = new ANotLogicalOperator(ttnotNode2);
        }
	nodeList.add(plogicaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ANotEqualLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalOperator plogicaloperatorNode1;
        {
            // Block
        TTNotEqual ttnotequalNode2;
        ttnotequalNode2 = (TTNotEqual)nodeArrayList1.get(0);

        plogicaloperatorNode1 = new ANotEqualLogicalOperator(ttnotequalNode2);
        }
	nodeList.add(plogicaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ADclTitration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTitration ptitrationNode1;
        {
            // Block
        PTitrationdcl ptitrationdclNode2;
        TTEqual ttequalNode3;
        PTitrations ptitrationsNode4;
        ptitrationdclNode2 = (PTitrationdcl)nodeArrayList1.get(0);
        ttequalNode3 = (TTEqual)nodeArrayList2.get(0);
        ptitrationsNode4 = (PTitrations)nodeArrayList3.get(0);

        ptitrationNode1 = new ADclTitration(ptitrationdclNode2, ttequalNode3, ptitrationsNode4);
        }
	nodeList.add(ptitrationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ASingleTitrations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTitrations ptitrationsNode1;
        {
            // Block
        TTString ttstringNode2;
        TTColon ttcolonNode3;
        PFactor pfactorNode4;
        PTitrationEnd ptitrationendNode5;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);
        ttcolonNode3 = (TTColon)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);
        ptitrationendNode5 = (PTitrationEnd)nodeArrayList4.get(0);

        ptitrationsNode1 = new ASingleTitrations(ttstringNode2, ttcolonNode3, pfactorNode4, ptitrationendNode5);
        }
	nodeList.add(ptitrationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AMultipleTitrations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTitrations ptitrationsNode1;
        {
            // Block
        TTString ttstringNode2;
        TTColon ttcolonNode3;
        PFactor pfactorNode4;
        PTitrationContinue ptitrationcontinueNode5;
        PTitrations ptitrationsNode6;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);
        ttcolonNode3 = (TTColon)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);
        ptitrationcontinueNode5 = (PTitrationContinue)nodeArrayList4.get(0);
        ptitrationsNode6 = (PTitrations)nodeArrayList5.get(0);

        ptitrationsNode1 = new AMultipleTitrations(ttstringNode2, ttcolonNode3, pfactorNode4, ptitrationcontinueNode5, ptitrationsNode6);
        }
	nodeList.add(ptitrationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ALoopTitrationEnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTitrationEnd ptitrationendNode1;
        {
            // Block
        TTColon ttcolonNode2;
        PLoop ploopNode3;
        TTSemicolon ttsemicolonNode4;
        ttcolonNode2 = (TTColon)nodeArrayList1.get(0);
        ploopNode3 = (PLoop)nodeArrayList2.get(0);
        ttsemicolonNode4 = (TTSemicolon)nodeArrayList3.get(0);

        ptitrationendNode1 = new ALoopTitrationEnd(ttcolonNode2, ploopNode3, ttsemicolonNode4);
        }
	nodeList.add(ptitrationendNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ASemicolonTitrationEnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTitrationEnd ptitrationendNode1;
        {
            // Block
        TTSemicolon ttsemicolonNode2;
        ttsemicolonNode2 = (TTSemicolon)nodeArrayList1.get(0);

        ptitrationendNode1 = new ASemicolonTitrationEnd(ttsemicolonNode2);
        }
	nodeList.add(ptitrationendNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ALoopTitrationContinue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTitrationContinue ptitrationcontinueNode1;
        {
            // Block
        TTColon ttcolonNode2;
        PLoop ploopNode3;
        TTComma ttcommaNode4;
        ttcolonNode2 = (TTColon)nodeArrayList1.get(0);
        ploopNode3 = (PLoop)nodeArrayList2.get(0);
        ttcommaNode4 = (TTComma)nodeArrayList3.get(0);

        ptitrationcontinueNode1 = new ALoopTitrationContinue(ttcolonNode2, ploopNode3, ttcommaNode4);
        }
	nodeList.add(ptitrationcontinueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ACommaTitrationContinue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTitrationContinue ptitrationcontinueNode1;
        {
            // Block
        TTComma ttcommaNode2;
        ttcommaNode2 = (TTComma)nodeArrayList1.get(0);

        ptitrationcontinueNode1 = new ACommaTitrationContinue(ttcommaNode2);
        }
	nodeList.add(ptitrationcontinueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ARemoveTitrationdcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTitrationdcl ptitrationdclNode1;
        {
            // Block
        TTRemmol ttremmolNode2;
        ttremmolNode2 = (TTRemmol)nodeArrayList1.get(0);

        ptitrationdclNode1 = new ARemoveTitrationdcl(ttremmolNode2);
        }
	nodeList.add(ptitrationdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AAddTitrationdcl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTitrationdcl ptitrationdclNode1;
        {
            // Block
        TTAddmol ttaddmolNode2;
        ttaddmolNode2 = (TTAddmol)nodeArrayList1.get(0);

        ptitrationdclNode1 = new AAddTitrationdcl(ttaddmolNode2);
        }
	nodeList.add(ptitrationdclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ADoubleReaction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReaction preactionNode1;
        {
            // Block
        PReactant preactantNode2;
        PArrows parrowsNode3;
        preactantNode2 = (PReactant)nodeArrayList1.get(0);
        parrowsNode3 = (PArrows)nodeArrayList2.get(0);

        preactionNode1 = new ADoubleReaction(preactantNode2, parrowsNode3);
        }
	nodeList.add(preactionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AMultipleReactant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReactant preactantNode1;
        {
            // Block
        PFactor pfactorNode2;
        TTMult ttmultNode3;
        TTString ttstringNode4;
        TTPlus ttplusNode5;
        PReactant preactantNode6;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        ttmultNode3 = (TTMult)nodeArrayList2.get(0);
        ttstringNode4 = (TTString)nodeArrayList3.get(0);
        ttplusNode5 = (TTPlus)nodeArrayList4.get(0);
        preactantNode6 = (PReactant)nodeArrayList5.get(0);

        preactantNode1 = new AMultipleReactant(pfactorNode2, ttmultNode3, ttstringNode4, ttplusNode5, preactantNode6);
        }
	nodeList.add(preactantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce APlusReactant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReactant preactantNode1;
        {
            // Block
        TTString ttstringNode2;
        TTPlus ttplusNode3;
        PReactant preactantNode4;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);
        ttplusNode3 = (TTPlus)nodeArrayList2.get(0);
        preactantNode4 = (PReactant)nodeArrayList3.get(0);

        preactantNode1 = new APlusReactant(ttstringNode2, ttplusNode3, preactantNode4);
        }
	nodeList.add(preactantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AStringReactant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReactant preactantNode1;
        {
            // Block
        TTString ttstringNode2;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);

        preactantNode1 = new AStringReactant(ttstringNode2);
        }
	nodeList.add(preactantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ASingleReactant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReactant preactantNode1;
        {
            // Block
        PFactor pfactorNode2;
        TTMult ttmultNode3;
        TTString ttstringNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        ttmultNode3 = (TTMult)nodeArrayList2.get(0);
        ttstringNode4 = (TTString)nodeArrayList3.get(0);

        preactantNode1 = new ASingleReactant(pfactorNode2, ttmultNode3, ttstringNode4);
        }
	nodeList.add(preactantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AOneWayArrows */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrows parrowsNode1;
        {
            // Block
        TTArrow ttarrowNode2;
        PReactant preactantNode3;
        TTComma ttcommaNode4;
        PReactionRateI preactionrateiNode5;
        TTSemicolon ttsemicolonNode6;
        ttarrowNode2 = (TTArrow)nodeArrayList1.get(0);
        preactantNode3 = (PReactant)nodeArrayList2.get(0);
        ttcommaNode4 = (TTComma)nodeArrayList3.get(0);
        preactionrateiNode5 = (PReactionRateI)nodeArrayList4.get(0);
        ttsemicolonNode6 = (TTSemicolon)nodeArrayList5.get(0);

        parrowsNode1 = new AOneWayArrows(ttarrowNode2, preactantNode3, ttcommaNode4, preactionrateiNode5, ttsemicolonNode6);
        }
	nodeList.add(parrowsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ATwoWayArrows */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrows parrowsNode1;
        {
            // Block
        TTDoubleArrow ttdoublearrowNode2;
        PReactant preactantNode3;
        TTComma ttcommaNode4;
        PReactionRateI preactionrateiNode5;
        TTColon ttcolonNode6;
        PReactionRateIi preactionrateiiNode7;
        TTSemicolon ttsemicolonNode8;
        ttdoublearrowNode2 = (TTDoubleArrow)nodeArrayList1.get(0);
        preactantNode3 = (PReactant)nodeArrayList2.get(0);
        ttcommaNode4 = (TTComma)nodeArrayList3.get(0);
        preactionrateiNode5 = (PReactionRateI)nodeArrayList4.get(0);
        ttcolonNode6 = (TTColon)nodeArrayList5.get(0);
        preactionrateiiNode7 = (PReactionRateIi)nodeArrayList6.get(0);
        ttsemicolonNode8 = (TTSemicolon)nodeArrayList7.get(0);

        parrowsNode1 = new ATwoWayArrows(ttdoublearrowNode2, preactantNode3, ttcommaNode4, preactionrateiNode5, ttcolonNode6, preactionrateiiNode7, ttsemicolonNode8);
        }
	nodeList.add(parrowsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AFuncReactionRateI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReactionRateI preactionrateiNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        preactionrateiNode1 = new AFuncReactionRateI(pfunccallNode2);
        }
	nodeList.add(preactionrateiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AUnitReactionRateI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReactionRateI preactionrateiNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        preactionrateiNode1 = new AUnitReactionRateI(pfactorNode2);
        }
	nodeList.add(preactionrateiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AReactionRateReactionRateIi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReactionRateIi preactionrateiiNode1;
        {
            // Block
        PReactionRateI preactionrateiNode2;
        preactionrateiNode2 = (PReactionRateI)nodeArrayList1.get(0);

        preactionrateiiNode1 = new AReactionRateReactionRateIi(preactionrateiNode2);
        }
	nodeList.add(preactionrateiiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AFCallFuncCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TTString ttstringNode2;
        TTLParen ttlparenNode3;
        PFuncParen pfuncparenNode4;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);
        ttlparenNode3 = (TTLParen)nodeArrayList2.get(0);
        pfuncparenNode4 = (PFuncParen)nodeArrayList3.get(0);

        pfunccallNode1 = new AFCallFuncCall(ttstringNode2, ttlparenNode3, pfuncparenNode4);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AWithParamFuncParen */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncParen pfuncparenNode1;
        {
            // Block
        PFuncParameters pfuncparametersNode2;
        TTRParen ttrparenNode3;
        pfuncparametersNode2 = (PFuncParameters)nodeArrayList1.get(0);
        ttrparenNode3 = (TTRParen)nodeArrayList2.get(0);

        pfuncparenNode1 = new AWithParamFuncParen(pfuncparametersNode2, ttrparenNode3);
        }
	nodeList.add(pfuncparenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANoParamFuncParen */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncParen pfuncparenNode1;
        {
            // Block
        TTRParen ttrparenNode2;
        ttrparenNode2 = (TTRParen)nodeArrayList1.get(0);

        pfuncparenNode1 = new ANoParamFuncParen(ttrparenNode2);
        }
	nodeList.add(pfuncparenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ASingleFuncParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncParameters pfuncparametersNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pfuncparametersNode1 = new ASingleFuncParameters(pfactorNode2);
        }
	nodeList.add(pfuncparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AMultipleFuncParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncParameters pfuncparametersNode1;
        {
            // Block
        PFactor pfactorNode2;
        TTComma ttcommaNode3;
        PFuncParameters pfuncparametersNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        ttcommaNode3 = (TTComma)nodeArrayList2.get(0);
        pfuncparametersNode4 = (PFuncParameters)nodeArrayList3.get(0);

        pfuncparametersNode1 = new AMultipleFuncParameters(pfactorNode2, ttcommaNode3, pfuncparametersNode4);
        }
	nodeList.add(pfuncparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ASingleCrn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCrn pcrnNode1;
        {
            // Block
        TTCrndcl ttcrndclNode2;
        PCrnfunc pcrnfuncNode3;
        ttcrndclNode2 = (TTCrndcl)nodeArrayList1.get(0);
        pcrnfuncNode3 = (PCrnfunc)nodeArrayList2.get(0);

        pcrnNode1 = new ASingleCrn(ttcrndclNode2, pcrnfuncNode3);
        }
	nodeList.add(pcrnNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AAblockcrnfunc1Crnfunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCrnfunc pcrnfuncNode1;
        {
            // Block
        TTLTurborg ttlturborgNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TTRTurborg ttrturborgNode4;
        ttlturborgNode2 = (TTLTurborg)nodeArrayList1.get(0);
        {
            // Block
        }
        ttrturborgNode4 = (TTRTurborg)nodeArrayList2.get(0);

        pcrnfuncNode1 = new ABlockCrnfunc(ttlturborgNode2, listNode3, ttrturborgNode4);
        }
	nodeList.add(pcrnfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AAblockcrnfunc2Crnfunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCrnfunc pcrnfuncNode1;
        {
            // Block
        TTLTurborg ttlturborgNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TTRTurborg ttrturborgNode5;
        ttlturborgNode2 = (TTLTurborg)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ttrturborgNode5 = (TTRTurborg)nodeArrayList3.get(0);

        pcrnfuncNode1 = new ABlockCrnfunc(ttlturborgNode2, listNode4, ttrturborgNode5);
        }
	nodeList.add(pcrnfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ASampleinitSample */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSample psampleNode1;
        {
            // Block
        TTSampledcl ttsampledclNode2;
        TTString ttstringNode3;
        PSamplefunc psamplefuncNode4;
        ttsampledclNode2 = (TTSampledcl)nodeArrayList1.get(0);
        ttstringNode3 = (TTString)nodeArrayList2.get(0);
        psamplefuncNode4 = (PSamplefunc)nodeArrayList3.get(0);

        psampleNode1 = new ASampleinitSample(ttsampledclNode2, ttstringNode3, psamplefuncNode4);
        }
	nodeList.add(psampleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AAbodysamplefunc1Samplefunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSamplefunc psamplefuncNode1;
        {
            // Block
        TTLTurborg ttlturborgNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TTRTurborg ttrturborgNode4;
        ttlturborgNode2 = (TTLTurborg)nodeArrayList1.get(0);
        {
            // Block
        }
        ttrturborgNode4 = (TTRTurborg)nodeArrayList2.get(0);

        psamplefuncNode1 = new ABodySamplefunc(ttlturborgNode2, listNode3, ttrturborgNode4);
        }
	nodeList.add(psamplefuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AAbodysamplefunc2Samplefunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSamplefunc psamplefuncNode1;
        {
            // Block
        TTLTurborg ttlturborgNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TTRTurborg ttrturborgNode5;
        ttlturborgNode2 = (TTLTurborg)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ttrturborgNode5 = (TTRTurborg)nodeArrayList3.get(0);

        psamplefuncNode1 = new ABodySamplefunc(ttlturborgNode2, listNode4, ttrturborgNode5);
        }
	nodeList.add(psamplefuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ARateSamplebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSamplebody psamplebodyNode1;
        {
            // Block
        PRate prateNode2;
        prateNode2 = (PRate)nodeArrayList1.get(0);

        psamplebodyNode1 = new ARateSamplebody(prateNode2);
        }
	nodeList.add(psamplebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ANumberinitSamplebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSamplebody psamplebodyNode1;
        {
            // Block
        PNumber pnumberNode2;
        pnumberNode2 = (PNumber)nodeArrayList1.get(0);

        psamplebodyNode1 = new ANumberinitSamplebody(pnumberNode2);
        }
	nodeList.add(psamplebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AAltervalueSamplebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSamplebody psamplebodyNode1;
        {
            // Block
        PAltervalue paltervalueNode2;
        paltervalueNode2 = (PAltervalue)nodeArrayList1.get(0);

        psamplebodyNode1 = new AAltervalueSamplebody(paltervalueNode2);
        }
	nodeList.add(psamplebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ASpeciesSamplebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSamplebody psamplebodyNode1;
        {
            // Block
        PSpecies pspeciesNode2;
        pspeciesNode2 = (PSpecies)nodeArrayList1.get(0);

        psamplebodyNode1 = new ASpeciesSamplebody(pspeciesNode2);
        }
	nodeList.add(psamplebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AFuncSamplebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSamplebody psamplebodyNode1;
        {
            // Block
        PFunc pfuncNode2;
        pfuncNode2 = (PFunc)nodeArrayList1.get(0);

        psamplebodyNode1 = new AFuncSamplebody(pfuncNode2);
        }
	nodeList.add(psamplebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ACrnSamplebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSamplebody psamplebodyNode1;
        {
            // Block
        PCrn pcrnNode2;
        pcrnNode2 = (PCrn)nodeArrayList1.get(0);

        psamplebodyNode1 = new ACrnSamplebody(pcrnNode2);
        }
	nodeList.add(psamplebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ATitsSamplebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSamplebody psamplebodyNode1;
        {
            // Block
        PTitration ptitrationNode2;
        ptitrationNode2 = (PTitration)nodeArrayList1.get(0);

        psamplebodyNode1 = new ATitsSamplebody(ptitrationNode2);
        }
	nodeList.add(psamplebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AAdclprotocol1Protocol */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProtocol pprotocolNode1;
        {
            // Block
        TTProtocoldcl ttprotocoldclNode2;
        TTLTurborg ttlturborgNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TTRTurborg ttrturborgNode5;
        ttprotocoldclNode2 = (TTProtocoldcl)nodeArrayList1.get(0);
        ttlturborgNode3 = (TTLTurborg)nodeArrayList2.get(0);
        {
            // Block
        }
        ttrturborgNode5 = (TTRTurborg)nodeArrayList3.get(0);

        pprotocolNode1 = new ADclProtocol(ttprotocoldclNode2, ttlturborgNode3, listNode4, ttrturborgNode5);
        }
	nodeList.add(pprotocolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce AAdclprotocol2Protocol */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProtocol pprotocolNode1;
        {
            // Block
        TTProtocoldcl ttprotocoldclNode2;
        TTLTurborg ttlturborgNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TTRTurborg ttrturborgNode6;
        ttprotocoldclNode2 = (TTProtocoldcl)nodeArrayList1.get(0);
        ttlturborgNode3 = (TTLTurborg)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        ttrturborgNode6 = (TTRTurborg)nodeArrayList4.get(0);

        pprotocolNode1 = new ADclProtocol(ttprotocoldclNode2, ttlturborgNode3, listNode5, ttrturborgNode6);
        }
	nodeList.add(pprotocolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AEquiliProtocolbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProtocolbody pprotocolbodyNode1;
        {
            // Block
        PEquili pequiliNode2;
        pequiliNode2 = (PEquili)nodeArrayList1.get(0);

        pprotocolbodyNode1 = new AEquiliProtocolbody(pequiliNode2);
        }
	nodeList.add(pprotocolbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ASampleProtocolbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProtocolbody pprotocolbodyNode1;
        {
            // Block
        TTSampledcl ttsampledclNode2;
        TTString ttstringNode3;
        PSampleref psamplerefNode4;
        ttsampledclNode2 = (TTSampledcl)nodeArrayList1.get(0);
        ttstringNode3 = (TTString)nodeArrayList2.get(0);
        psamplerefNode4 = (PSampleref)nodeArrayList3.get(0);

        pprotocolbodyNode1 = new ASampleProtocolbody(ttsampledclNode2, ttstringNode3, psamplerefNode4);
        }
	nodeList.add(pprotocolbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ADisposeProtocolbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProtocolbody pprotocolbodyNode1;
        {
            // Block
        TTString ttstringNode2;
        TTDot ttdotNode3;
        TTDisposedcl ttdisposedclNode4;
        PDisposePara pdisposeparaNode5;
        TTSemicolon ttsemicolonNode6;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);
        ttdotNode3 = (TTDot)nodeArrayList2.get(0);
        ttdisposedclNode4 = (TTDisposedcl)nodeArrayList3.get(0);
        pdisposeparaNode5 = (PDisposePara)nodeArrayList4.get(0);
        ttsemicolonNode6 = (TTSemicolon)nodeArrayList5.get(0);

        pprotocolbodyNode1 = new ADisposeProtocolbody(ttstringNode2, ttdotNode3, ttdisposedclNode4, pdisposeparaNode5, ttsemicolonNode6);
        }
	nodeList.add(pprotocolbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ANonzeroDisposePara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDisposePara pdisposeparaNode1;
        {
            // Block
        TTLParen ttlparenNode2;
        PFactor pfactorNode3;
        TTRParen ttrparenNode4;
        ttlparenNode2 = (TTLParen)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);
        ttrparenNode4 = (TTRParen)nodeArrayList3.get(0);

        pdisposeparaNode1 = new ANonzeroDisposePara(ttlparenNode2, pfactorNode3, ttrparenNode4);
        }
	nodeList.add(pdisposeparaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ANoneDisposePara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDisposePara pdisposeparaNode1;
        {
            // Block
        TTLParen ttlparenNode2;
        TTRParen ttrparenNode3;
        ttlparenNode2 = (TTLParen)nodeArrayList1.get(0);
        ttrparenNode3 = (TTRParen)nodeArrayList2.get(0);

        pdisposeparaNode1 = new ANoneDisposePara(ttlparenNode2, ttrparenNode3);
        }
	nodeList.add(pdisposeparaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce AMixSampleref */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSampleref psamplerefNode1;
        {
            // Block
        TTEqual ttequalNode2;
        TTMixdcl ttmixdclNode3;
        TTLParen ttlparenNode4;
        TTString ttstringNode5;
        TTComma ttcommaNode6;
        PProtocolparam pprotocolparamNode7;
        TTRParen ttrparenNode8;
        TTSemicolon ttsemicolonNode9;
        ttequalNode2 = (TTEqual)nodeArrayList1.get(0);
        ttmixdclNode3 = (TTMixdcl)nodeArrayList2.get(0);
        ttlparenNode4 = (TTLParen)nodeArrayList3.get(0);
        ttstringNode5 = (TTString)nodeArrayList4.get(0);
        ttcommaNode6 = (TTComma)nodeArrayList5.get(0);
        pprotocolparamNode7 = (PProtocolparam)nodeArrayList6.get(0);
        ttrparenNode8 = (TTRParen)nodeArrayList7.get(0);
        ttsemicolonNode9 = (TTSemicolon)nodeArrayList8.get(0);

        psamplerefNode1 = new AMixSampleref(ttequalNode2, ttmixdclNode3, ttlparenNode4, ttstringNode5, ttcommaNode6, pprotocolparamNode7, ttrparenNode8, ttsemicolonNode9);
        }
	nodeList.add(psamplerefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ASplitSampleref */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSampleref psamplerefNode1;
        {
            // Block
        PProtoexstend pprotoexstendNode2;
        TTEqual ttequalNode3;
        TTString ttstringNode4;
        TTDot ttdotNode5;
        TTSplitdcl ttsplitdclNode6;
        TTLParen ttlparenNode7;
        PFuncParameters pfuncparametersNode8;
        TTRParen ttrparenNode9;
        TTSemicolon ttsemicolonNode10;
        pprotoexstendNode2 = (PProtoexstend)nodeArrayList1.get(0);
        ttequalNode3 = (TTEqual)nodeArrayList2.get(0);
        ttstringNode4 = (TTString)nodeArrayList3.get(0);
        ttdotNode5 = (TTDot)nodeArrayList4.get(0);
        ttsplitdclNode6 = (TTSplitdcl)nodeArrayList5.get(0);
        ttlparenNode7 = (TTLParen)nodeArrayList6.get(0);
        pfuncparametersNode8 = (PFuncParameters)nodeArrayList7.get(0);
        ttrparenNode9 = (TTRParen)nodeArrayList8.get(0);
        ttsemicolonNode10 = (TTSemicolon)nodeArrayList9.get(0);

        psamplerefNode1 = new ASplitSampleref(pprotoexstendNode2, ttequalNode3, ttstringNode4, ttdotNode5, ttsplitdclNode6, ttlparenNode7, pfuncparametersNode8, ttrparenNode9, ttsemicolonNode10);
        }
	nodeList.add(psamplerefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce AMultiProtocolparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProtocolparam pprotocolparamNode1;
        {
            // Block
        TTString ttstringNode2;
        TTComma ttcommaNode3;
        PProtocolparam pprotocolparamNode4;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);
        ttcommaNode3 = (TTComma)nodeArrayList2.get(0);
        pprotocolparamNode4 = (PProtocolparam)nodeArrayList3.get(0);

        pprotocolparamNode1 = new AMultiProtocolparam(ttstringNode2, ttcommaNode3, pprotocolparamNode4);
        }
	nodeList.add(pprotocolparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ASingleProtocolparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProtocolparam pprotocolparamNode1;
        {
            // Block
        TTString ttstringNode2;
        ttstringNode2 = (TTString)nodeArrayList1.get(0);

        pprotocolparamNode1 = new ASingleProtocolparam(ttstringNode2);
        }
	nodeList.add(pprotocolparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce AMultiProtoexstend */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProtoexstend pprotoexstendNode1;
        {
            // Block
        TTComma ttcommaNode2;
        TTString ttstringNode3;
        PProtoexstend pprotoexstendNode4;
        ttcommaNode2 = (TTComma)nodeArrayList1.get(0);
        ttstringNode3 = (TTString)nodeArrayList2.get(0);
        pprotoexstendNode4 = (PProtoexstend)nodeArrayList3.get(0);

        pprotoexstendNode1 = new AMultiProtoexstend(ttcommaNode2, ttstringNode3, pprotoexstendNode4);
        }
	nodeList.add(pprotoexstendNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ASingleProtoexstend */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProtoexstend pprotoexstendNode1;
        {
            // Block
        TTComma ttcommaNode2;
        TTString ttstringNode3;
        ttcommaNode2 = (TTComma)nodeArrayList1.get(0);
        ttstringNode3 = (TTString)nodeArrayList2.get(0);

        pprotoexstendNode1 = new ASingleProtoexstend(ttcommaNode2, ttstringNode3);
        }
	nodeList.add(pprotoexstendNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ASingleEquili */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEquili pequiliNode1;
        {
            // Block
        TTEquilibratedcl ttequilibratedclNode2;
        TTString ttstringNode3;
        TTFordcl ttfordclNode4;
        PFactor pfactorNode5;
        POption poptionNode6;
        PExtendequili pextendequiliNode7;
        ttequilibratedclNode2 = (TTEquilibratedcl)nodeArrayList1.get(0);
        ttstringNode3 = (TTString)nodeArrayList2.get(0);
        ttfordclNode4 = (TTFordcl)nodeArrayList3.get(0);
        pfactorNode5 = (PFactor)nodeArrayList4.get(0);
        poptionNode6 = (POption)nodeArrayList5.get(0);
        pextendequiliNode7 = (PExtendequili)nodeArrayList6.get(0);

        pequiliNode1 = new ASingleEquili(ttequilibratedclNode2, ttstringNode3, ttfordclNode4, pfactorNode5, poptionNode6, pextendequiliNode7);
        }
	nodeList.add(pequiliNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ATimeOption */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POption poptionNode1;
        {
            // Block
        TTTime tttimeNode2;
        tttimeNode2 = (TTTime)nodeArrayList1.get(0);

        poptionNode1 = new ATimeOption(tttimeNode2);
        }
	nodeList.add(poptionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ACycleOption */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POption poptionNode1;
        {
            // Block
        TTCycle ttcycleNode2;
        ttcycleNode2 = (TTCycle)nodeArrayList1.get(0);

        poptionNode1 = new ACycleOption(ttcycleNode2);
        }
	nodeList.add(poptionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ASemiExtendequili */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExtendequili pextendequiliNode1;
        {
            // Block
        PTimestep ptimestepNode2;
        ptimestepNode2 = (PTimestep)nodeArrayList1.get(0);

        pextendequiliNode1 = new ASemiExtendequili(ptimestepNode2);
        }
	nodeList.add(pextendequiliNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce AStepExtendequili */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExtendequili pextendequiliNode1;
        {
            // Block
        TTBydcl ttbydclNode2;
        PFactor pfactorNode3;
        PTimestep ptimestepNode4;
        ttbydclNode2 = (TTBydcl)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);
        ptimestepNode4 = (PTimestep)nodeArrayList3.get(0);

        pextendequiliNode1 = new AStepExtendequili(ttbydclNode2, pfactorNode3, ptimestepNode4);
        }
	nodeList.add(pextendequiliNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce AWithTimestep */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTimestep ptimestepNode1;
        {
            // Block
        TTEach tteachNode2;
        PFactor pfactorNode3;
        TTSemicolon ttsemicolonNode4;
        tteachNode2 = (TTEach)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);
        ttsemicolonNode4 = (TTSemicolon)nodeArrayList3.get(0);

        ptimestepNode1 = new AWithTimestep(tteachNode2, pfactorNode3, ttsemicolonNode4);
        }
	nodeList.add(ptimestepNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce ANoTimestep */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTimestep ptimestepNode1;
        {
            // Block
        TTSemicolon ttsemicolonNode2;
        ttsemicolonNode2 = (TTSemicolon)nodeArrayList1.get(0);

        ptimestepNode1 = new ANoTimestep(ttsemicolonNode2);
        }
	nodeList.add(ptimestepNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce ATerminal$Initializebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInitializebody pinitializebodyNode1;
        pinitializebodyNode1 = (PInitializebody)nodeArrayList1.get(0);
	if(pinitializebodyNode1 != null)
	{
	  listNode2.add(pinitializebodyNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce ANonTerminal$Initializebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInitializebody pinitializebodyNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinitializebodyNode2 = (PInitializebody)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinitializebodyNode2 != null)
	{
	  listNode3.add(pinitializebodyNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce ATerminal$Reaction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PReaction preactionNode1;
        preactionNode1 = (PReaction)nodeArrayList1.get(0);
	if(preactionNode1 != null)
	{
	  listNode2.add(preactionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce ANonTerminal$Reaction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PReaction preactionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        preactionNode2 = (PReaction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(preactionNode2 != null)
	{
	  listNode3.add(preactionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce ATerminal$Samplebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PSamplebody psamplebodyNode1;
        psamplebodyNode1 = (PSamplebody)nodeArrayList1.get(0);
	if(psamplebodyNode1 != null)
	{
	  listNode2.add(psamplebodyNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce ANonTerminal$Samplebody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PSamplebody psamplebodyNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psamplebodyNode2 = (PSamplebody)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psamplebodyNode2 != null)
	{
	  listNode3.add(psamplebodyNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce ATerminal$Protocolbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PProtocolbody pprotocolbodyNode1;
        pprotocolbodyNode1 = (PProtocolbody)nodeArrayList1.get(0);
	if(pprotocolbodyNode1 != null)
	{
	  listNode2.add(pprotocolbodyNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new125() /* reduce ANonTerminal$Protocolbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PProtocolbody pprotocolbodyNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pprotocolbodyNode2 = (PProtocolbody)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pprotocolbodyNode2 != null)
	{
	  listNode3.add(pprotocolbodyNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {35, SHIFT, 1}, },
			{{-1, ERROR, 1}, {27, SHIFT, 4}, },
			{{-1, ERROR, 2}, {54, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {45, SHIFT, 5}, },
			{{-1, ERROR, 4}, {11, SHIFT, 7}, {28, SHIFT, 8}, {36, SHIFT, 9}, {37, SHIFT, 10}, {38, SHIFT, 11}, {39, SHIFT, 12}, {40, SHIFT, 13}, {41, SHIFT, 14}, },
			{{-1, ERROR, 5}, {27, SHIFT, 23}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 7}, {4, SHIFT, 24}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 9}, {11, SHIFT, 25}, },
			{{-1, ERROR, 10}, {11, SHIFT, 26}, },
			{{-1, ERROR, 11}, {11, SHIFT, 28}, },
			{{-1, ERROR, 12}, {11, SHIFT, 30}, },
			{{-1, ERROR, 13}, {11, SHIFT, 31}, },
			{{-1, ERROR, 14}, {11, SHIFT, 32}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 22}, {11, SHIFT, 7}, {28, SHIFT, 33}, {36, SHIFT, 9}, {37, SHIFT, 10}, {38, SHIFT, 11}, {39, SHIFT, 12}, {40, SHIFT, 13}, {41, SHIFT, 14}, },
			{{-1, ERROR, 23}, {11, SHIFT, 35}, {28, SHIFT, 36}, {36, SHIFT, 37}, {46, SHIFT, 38}, },
			{{-1, ERROR, 24}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, ERROR, 25}, {27, SHIFT, 52}, },
			{{-1, ERROR, 26}, {4, SHIFT, 54}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 28}, {4, SHIFT, 55}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 30}, {25, SHIFT, 56}, },
			{{-1, ERROR, 31}, {4, SHIFT, 57}, },
			{{-1, ERROR, 32}, {4, SHIFT, 58}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 35}, {32, SHIFT, 59}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 37}, {11, SHIFT, 60}, },
			{{-1, ERROR, 38}, {11, SHIFT, 61}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 41}, {11, SHIFT, 35}, {28, SHIFT, 62}, {36, SHIFT, 37}, {46, SHIFT, 38}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 45}, {1, SHIFT, 64}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, ERROR, 46}, {24, SHIFT, 66}, },
			{{-1, REDUCE, 29}, {0, SHIFT, 67}, {1, SHIFT, 68}, },
			{{-1, REDUCE, 34}, {2, SHIFT, 70}, {3, SHIFT, 71}, },
			{{-1, REDUCE, 38}, {5, SHIFT, 72}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 52}, {11, SHIFT, 7}, {28, SHIFT, 73}, {33, SHIFT, 74}, {34, SHIFT, 75}, {37, SHIFT, 10}, {38, SHIFT, 11}, {39, SHIFT, 12}, {40, SHIFT, 13}, {41, SHIFT, 14}, {44, SHIFT, 76}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 54}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, ERROR, 55}, {12, SHIFT, 88}, },
			{{-1, ERROR, 56}, {40, SHIFT, 89}, {41, SHIFT, 90}, {42, SHIFT, 91}, {51, SHIFT, 92}, },
			{{-1, ERROR, 57}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, ERROR, 58}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, ERROR, 59}, {48, SHIFT, 97}, },
			{{-1, ERROR, 60}, {4, SHIFT, 98}, {22, SHIFT, 99}, },
			{{-1, ERROR, 61}, {50, SHIFT, 102}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 125}, },
			{{-1, ERROR, 64}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, },
			{{-1, ERROR, 65}, {26, SHIFT, 104}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 69}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, ERROR, 70}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, ERROR, 71}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, ERROR, 72}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 108}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 76}, {27, SHIFT, 111}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 83}, {4, SHIFT, 113}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 122}, },
			{{-1, ERROR, 86}, {11, SHIFT, 7}, {28, SHIFT, 114}, {33, SHIFT, 74}, {34, SHIFT, 75}, {37, SHIFT, 10}, {38, SHIFT, 11}, {39, SHIFT, 12}, {40, SHIFT, 13}, {41, SHIFT, 14}, {44, SHIFT, 76}, },
			{{-1, ERROR, 87}, {22, SHIFT, 116}, {24, SHIFT, 117}, },
			{{-1, ERROR, 88}, {22, SHIFT, 118}, {24, SHIFT, 119}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 93}, {26, SHIFT, 120}, },
			{{-1, ERROR, 94}, {11, SHIFT, 121}, },
			{{-1, ERROR, 95}, {22, SHIFT, 122}, {24, SHIFT, 123}, },
			{{-1, ERROR, 96}, {22, SHIFT, 125}, {24, SHIFT, 126}, },
			{{-1, ERROR, 97}, {25, SHIFT, 128}, },
			{{-1, ERROR, 98}, {47, SHIFT, 130}, },
			{{-1, ERROR, 99}, {11, SHIFT, 131}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 101}, {4, SHIFT, 132}, },
			{{-1, ERROR, 102}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, },
			{{-1, ERROR, 103}, {26, SHIFT, 134}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 108}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 111}, {10, SHIFT, 42}, {11, SHIFT, 136}, {12, SHIFT, 44}, {28, SHIFT, 137}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 113}, {11, SHIFT, 142}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 123}, },
			{{-1, ERROR, 116}, {11, SHIFT, 26}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 118}, {11, SHIFT, 28}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 120}, {6, SHIFT, 146}, },
			{{-1, REDUCE, 22}, {22, SHIFT, 147}, },
			{{-1, ERROR, 122}, {11, SHIFT, 148}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 125}, {11, SHIFT, 149}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 128}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {26, SHIFT, 150}, },
			{{-1, ERROR, 129}, {24, SHIFT, 152}, },
			{{-1, ERROR, 130}, {25, SHIFT, 153}, },
			{{-1, REDUCE, 110}, {22, SHIFT, 99}, },
			{{-1, ERROR, 132}, {11, SHIFT, 155}, },
			{{-1, ERROR, 133}, {7, SHIFT, 156}, {8, SHIFT, 157}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 135}, {26, SHIFT, 159}, },
			{{-1, REDUCE, 73}, {0, SHIFT, 160}, {2, REDUCE, 44}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 138}, {2, SHIFT, 161}, },
			{{-1, REDUCE, 120}, },
			{{-1, ERROR, 140}, {29, SHIFT, 162}, {30, SHIFT, 163}, },
			{{-1, ERROR, 141}, {10, SHIFT, 42}, {11, SHIFT, 136}, {12, SHIFT, 44}, {28, SHIFT, 165}, },
			{{-1, ERROR, 142}, {23, SHIFT, 167}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 146}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, ERROR, 147}, {40, SHIFT, 89}, {41, SHIFT, 90}, {42, SHIFT, 91}, {51, SHIFT, 92}, },
			{{-1, ERROR, 148}, {4, SHIFT, 170}, },
			{{-1, ERROR, 149}, {4, SHIFT, 171}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 151}, {26, SHIFT, 172}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 153}, {11, SHIFT, 173}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 155}, {32, SHIFT, 174}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 158}, {24, SHIFT, 175}, {52, SHIFT, 176}, {53, SHIFT, 177}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 160}, {10, SHIFT, 42}, {11, SHIFT, 136}, {12, SHIFT, 44}, },
			{{-1, ERROR, 161}, {11, SHIFT, 181}, },
			{{-1, ERROR, 162}, {10, SHIFT, 42}, {11, SHIFT, 136}, {12, SHIFT, 44}, },
			{{-1, ERROR, 163}, {10, SHIFT, 42}, {11, SHIFT, 136}, {12, SHIFT, 44}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 121}, },
			{{-1, ERROR, 167}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, },
			{{-1, ERROR, 168}, {24, SHIFT, 185}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 170}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, ERROR, 171}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 173}, {22, SHIFT, 188}, },
			{{-1, ERROR, 174}, {49, SHIFT, 189}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 176}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, },
			{{-1, ERROR, 177}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 74}, {0, SHIFT, 192}, },
			{{-1, ERROR, 182}, {22, SHIFT, 193}, },
			{{-1, ERROR, 183}, {22, SHIFT, 194}, },
			{{-1, ERROR, 184}, {22, SHIFT, 195}, {23, SHIFT, 196}, {24, SHIFT, 197}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 186}, {22, SHIFT, 122}, {24, SHIFT, 123}, },
			{{-1, ERROR, 187}, {22, SHIFT, 125}, {24, SHIFT, 126}, },
			{{-1, ERROR, 188}, {11, SHIFT, 202}, },
			{{-1, ERROR, 189}, {25, SHIFT, 204}, },
			{{-1, ERROR, 190}, {24, SHIFT, 175}, {53, SHIFT, 177}, },
			{{-1, ERROR, 191}, {24, SHIFT, 206}, },
			{{-1, ERROR, 192}, {10, SHIFT, 42}, {11, SHIFT, 136}, {12, SHIFT, 44}, },
			{{-1, ERROR, 193}, {10, SHIFT, 42}, {11, SHIFT, 208}, {12, SHIFT, 44}, },
			{{-1, ERROR, 194}, {10, SHIFT, 42}, {11, SHIFT, 208}, {12, SHIFT, 44}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 196}, {43, SHIFT, 213}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 199}, {11, SHIFT, 142}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 108}, {22, SHIFT, 216}, },
			{{-1, ERROR, 203}, {26, SHIFT, 217}, },
			{{-1, ERROR, 204}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 44}, {25, SHIFT, 220}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 210}, {24, SHIFT, 221}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 212}, {23, SHIFT, 222}, },
			{{-1, ERROR, 213}, {25, SHIFT, 223}, },
			{{-1, ERROR, 214}, {22, SHIFT, 224}, {24, SHIFT, 225}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 216}, {11, SHIFT, 202}, },
			{{-1, ERROR, 217}, {24, SHIFT, 227}, },
			{{-1, REDUCE, 83}, {22, SHIFT, 228}, },
			{{-1, ERROR, 219}, {26, SHIFT, 229}, },
			{{-1, ERROR, 220}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {26, SHIFT, 230}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 222}, {10, SHIFT, 42}, {11, SHIFT, 208}, {12, SHIFT, 44}, },
			{{-1, ERROR, 223}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 228}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, },
			{{-1, ERROR, 229}, {24, SHIFT, 239}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 232}, {26, SHIFT, 240}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 234}, {24, SHIFT, 241}, },
			{{-1, ERROR, 235}, {13, SHIFT, 242}, {14, SHIFT, 243}, {15, SHIFT, 244}, {16, SHIFT, 245}, {19, SHIFT, 246}, {20, SHIFT, 247}, {21, SHIFT, 248}, },
			{{-1, ERROR, 236}, {26, SHIFT, 250}, },
			{{-1, REDUCE, 49}, {17, SHIFT, 251}, {18, SHIFT, 252}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 249}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 253}, {10, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, {25, SHIFT, 45}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 50}, },
        };*/
    private static final int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 15}, {22, 34}, },
			{{-1, 16}, {52, 77}, {86, 77}, },
			{{-1, 17}, {52, 78}, {86, 78}, },
			{{-1, 124}, {186, 200}, },
			{{-1, 127}, {187, 201}, },
			{{-1, 18}, {52, 79}, {86, 79}, },
			{{-1, 27}, {116, 144}, },
			{{-1, 19}, {52, 80}, {86, 80}, },
			{{-1, 93}, {147, 169}, },
			{{-1, 94}, },
			{{-1, 20}, {52, 81}, {86, 81}, },
			{{-1, 29}, {118, 145}, },
			{{-1, 235}, {24, 46}, {45, 65}, {54, 87}, {57, 95}, {58, 96}, {69, 105}, {108, 135}, {146, 168}, {170, 186}, {171, 187}, {249, 254}, },
			{{-1, 255}, },
			{{-1, 69}, },
			{{-1, 47}, {70, 106}, {71, 107}, },
			{{-1, 48}, },
			{{-1, 49}, },
			{{-1, 50}, },
			{{-1, 51}, {64, 103}, {72, 109}, {102, 133}, {111, 138}, {128, 151}, {141, 138}, {160, 138}, {162, 138}, {163, 138}, {167, 184}, {176, 190}, {177, 191}, {192, 138}, {193, 209}, {194, 209}, {204, 218}, {220, 218}, {222, 209}, {228, 218}, },
			{{-1, 110}, },
			{{-1, 214}, },
			{{-1, 236}, {253, 256}, },
			{{-1, 237}, },
			{{-1, 253}, },
			{{-1, 249}, },
			{{-1, 82}, },
			{{-1, 143}, {199, 215}, },
			{{-1, 198}, },
			{{-1, 199}, },
			{{-1, 83}, },
			{{-1, 139}, {141, 166}, },
			{{-1, 140}, {160, 180}, {162, 182}, {163, 183}, {192, 207}, },
			{{-1, 164}, },
			{{-1, 210}, {194, 212}, {222, 233}, },
			{{-1, 234}, },
			{{-1, 211}, },
			{{-1, 231}, },
			{{-1, 219}, {220, 232}, {228, 238}, },
			{{-1, 84}, },
			{{-1, 112}, },
			{{-1, 21}, },
			{{-1, 53}, },
			{{-1, 85}, {86, 115}, },
			{{-1, 6}, },
			{{-1, 39}, {41, 63}, },
			{{-1, 129}, },
			{{-1, 100}, },
			{{-1, 203}, {216, 226}, },
			{{-1, 101}, {131, 154}, },
			{{-1, 40}, },
			{{-1, 158}, },
			{{-1, 178}, },
			{{-1, 179}, {190, 205}, },
			{{-1, 22}, },
			{{-1, 141}, },
			{{-1, 86}, },
			{{-1, 41}, },
        };*/
    private static final String[] errorMessages;
/*      {
			"expecting: t initializedcl",
			"expecting: t l turborg",
			"expecting: EOF",
			"expecting: t protocoldcl",
			"expecting: t string, t r turborg, t sampledcl, t speciesdcl, t ratedcl, t funcdcl, t float type, t int type",
			"expecting: t equal",
			"expecting: t string",
			"expecting: t string, t r turborg, t sampledcl, t equilibratedcl",
			"expecting: t int, t string, t float, t l paren",
			"expecting: t string, t r turborg, t addmol, t remmol, t sampledcl, t speciesdcl, t ratedcl, t funcdcl, t float type, t int type, t crndcl",
			"expecting: t l paren",
			"expecting: t dot",
			"expecting: t plus, t minus, t mult, t div, t power, t time, t cycle, t equal or greater, t equal or smaller, t not, t not equal, t and, t or, t logical equal, t greater, t smaller, t comma, t colon, t semicolon, t r paren, t each",
			"expecting: t minus, t int, t string, t float, t l paren",
			"expecting: t semicolon",
			"expecting: t plus, t minus, t equal or greater, t equal or smaller, t not, t not equal, t and, t or, t logical equal, t greater, t smaller, t comma, t semicolon, t r paren",
			"expecting: t plus, t minus, t mult, t div, t equal or greater, t equal or smaller, t not, t not equal, t and, t or, t logical equal, t greater, t smaller, t comma, t semicolon, t r paren",
			"expecting: t plus, t minus, t mult, t div, t power, t equal or greater, t equal or smaller, t not, t not equal, t and, t or, t logical equal, t greater, t smaller, t comma, t semicolon, t r paren",
			"expecting: t string, t r turborg, t addmol, t remmol, t speciesdcl, t ratedcl, t funcdcl, t float type, t int type, t crndcl",
			"expecting: t float",
			"expecting: t float type, t int type, t rate type, t voiddcl",
			"expecting: t disposedcl",
			"expecting: t equal, t comma",
			"expecting: t fordcl",
			"expecting: t int, t string, t float",
			"expecting: t r paren",
			"expecting: t comma, t semicolon",
			"expecting: t mixdcl",
			"expecting: t equal or greater, t equal or smaller, t not, t not equal, t and, t or, t logical equal, t greater, t smaller, t comma, t semicolon, t r paren",
			"expecting: t int, t string, t float, t r turborg",
			"expecting: t lambda",
			"expecting: t comma, t r paren",
			"expecting: t int, t string, t float, t r paren",
			"expecting: t time, t cycle",
			"expecting: t plus, t mult, t comma, t arrow, t double arrow",
			"expecting: t mult",
			"expecting: t arrow, t double arrow",
			"expecting: t colon",
			"expecting: t semicolon, t bydcl, t each",
			"expecting: t comma",
			"expecting: t splitdcl",
			"expecting: t comma, t arrow, t double arrow",
			"expecting: t plus, t comma, t arrow, t double arrow",
			"expecting: t comma, t colon, t semicolon",
			"expecting: t semicolon, t each",
			"expecting: t whiledcl",
			"expecting: t colon, t semicolon, t l paren",
			"expecting: t colon, t semicolon",
			"expecting: t equal or greater, t equal or smaller, t not, t not equal, t logical equal, t greater, t smaller",
			"expecting: t and, t or, t r paren",
        };*/
    private static final int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 2, 5, 3, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 7, 8, 1, 5, 9, 5, 9, 10, 5, 5, 3, 4, 11, 2, 6, 6, 7, 7, 7, 12, 12, 12, 13, 14, 15, 16, 17, 17, 17, 18, 4, 8, 19, 20, 8, 8, 21, 22, 23, 2, 7, 24, 25, 9, 8, 8, 8, 8, 8, 8, 4, 5, 5, 1, 18, 18, 18, 18, 18, 18, 5, 18, 18, 18, 26, 26, 6, 6, 6, 25, 25, 6, 26, 26, 10, 27, 6, 7, 5, 24, 25, 17, 28, 15, 15, 8, 16, 16, 29, 18, 6, 4, 18, 6, 9, 6, 9, 30, 31, 6, 9, 9, 6, 9, 9, 32, 14, 10, 22, 6, 33, 17, 25, 34, 18, 35, 29, 36, 29, 37, 18, 9, 9, 8, 20, 5, 5, 14, 25, 7, 6, 5, 11, 38, 38, 38, 16, 24, 6, 24, 24, 29, 18, 29, 24, 14, 25, 8, 8, 14, 39, 40, 7, 24, 24, 7, 7, 41, 42, 39, 39, 43, 9, 26, 26, 6, 10, 44, 14, 24, 24, 24, 6, 45, 18, 18, 6, 9, 9, 31, 25, 24, 7, 7, 41, 46, 47, 14, 47, 37, 10, 26, 18, 6, 14, 31, 25, 32, 29, 24, 8, 6, 18, 25, 7, 24, 14, 47, 47, 25, 14, 14, 48, 25, 49, 25, 7, 47, 29, 8, 8, 8, 8, 8, 8, 8, 8, 26, 8, 8, 8, 49, 49, 25, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
