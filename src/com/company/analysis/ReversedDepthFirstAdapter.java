/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.company.analysis;

import java.util.*;
import com.company.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAMainProgram(AMainProgram node)
    {
        defaultIn(node);
    }

    public void outAMainProgram(AMainProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainProgram(AMainProgram node)
    {
        inAMainProgram(node);
        if(node.getProtocol() != null)
        {
            node.getProtocol().apply(this);
        }
        if(node.getInit() != null)
        {
            node.getInit().apply(this);
        }
        outAMainProgram(node);
    }

    public void inAInitializedclInit(AInitializedclInit node)
    {
        defaultIn(node);
    }

    public void outAInitializedclInit(AInitializedclInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializedclInit(AInitializedclInit node)
    {
        inAInitializedclInit(node);
        if(node.getTRTurborg() != null)
        {
            node.getTRTurborg().apply(this);
        }
        {
            List<PInitializebody> copy = new ArrayList<PInitializebody>(node.getInitializebody());
            Collections.reverse(copy);
            for(PInitializebody e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTLTurborg() != null)
        {
            node.getTLTurborg().apply(this);
        }
        if(node.getTInitializedcl() != null)
        {
            node.getTInitializedcl().apply(this);
        }
        outAInitializedclInit(node);
    }

    public void inARateinitInitializebody(ARateinitInitializebody node)
    {
        defaultIn(node);
    }

    public void outARateinitInitializebody(ARateinitInitializebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARateinitInitializebody(ARateinitInitializebody node)
    {
        inARateinitInitializebody(node);
        if(node.getRate() != null)
        {
            node.getRate().apply(this);
        }
        outARateinitInitializebody(node);
    }

    public void inAFuncinitInitializebody(AFuncinitInitializebody node)
    {
        defaultIn(node);
    }

    public void outAFuncinitInitializebody(AFuncinitInitializebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncinitInitializebody(AFuncinitInitializebody node)
    {
        inAFuncinitInitializebody(node);
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outAFuncinitInitializebody(node);
    }

    public void inASpeciesinitInitializebody(ASpeciesinitInitializebody node)
    {
        defaultIn(node);
    }

    public void outASpeciesinitInitializebody(ASpeciesinitInitializebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpeciesinitInitializebody(ASpeciesinitInitializebody node)
    {
        inASpeciesinitInitializebody(node);
        if(node.getSpecies() != null)
        {
            node.getSpecies().apply(this);
        }
        outASpeciesinitInitializebody(node);
    }

    public void inANumberinitInitializebody(ANumberinitInitializebody node)
    {
        defaultIn(node);
    }

    public void outANumberinitInitializebody(ANumberinitInitializebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberinitInitializebody(ANumberinitInitializebody node)
    {
        inANumberinitInitializebody(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberinitInitializebody(node);
    }

    public void inAAltervalueInitializebody(AAltervalueInitializebody node)
    {
        defaultIn(node);
    }

    public void outAAltervalueInitializebody(AAltervalueInitializebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAltervalueInitializebody(AAltervalueInitializebody node)
    {
        inAAltervalueInitializebody(node);
        if(node.getAltervalue() != null)
        {
            node.getAltervalue().apply(this);
        }
        outAAltervalueInitializebody(node);
    }

    public void inASampleinitInitializebody(ASampleinitInitializebody node)
    {
        defaultIn(node);
    }

    public void outASampleinitInitializebody(ASampleinitInitializebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASampleinitInitializebody(ASampleinitInitializebody node)
    {
        inASampleinitInitializebody(node);
        if(node.getSample() != null)
        {
            node.getSample().apply(this);
        }
        outASampleinitInitializebody(node);
    }

    public void inAStringAltervalue(AStringAltervalue node)
    {
        defaultIn(node);
    }

    public void outAStringAltervalue(AStringAltervalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringAltervalue(AStringAltervalue node)
    {
        inAStringAltervalue(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTEqual() != null)
        {
            node.getTEqual().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outAStringAltervalue(node);
    }

    public void inAFloatNumber(AFloatNumber node)
    {
        defaultIn(node);
    }

    public void outAFloatNumber(AFloatNumber node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatNumber(AFloatNumber node)
    {
        inAFloatNumber(node);
        if(node.getFloats() != null)
        {
            node.getFloats().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTEqual() != null)
        {
            node.getTEqual().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTFloatType() != null)
        {
            node.getTFloatType().apply(this);
        }
        outAFloatNumber(node);
    }

    public void inAIntNumber(AIntNumber node)
    {
        defaultIn(node);
    }

    public void outAIntNumber(AIntNumber node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntNumber(AIntNumber node)
    {
        inAIntNumber(node);
        if(node.getIntegers() != null)
        {
            node.getIntegers().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTEqual() != null)
        {
            node.getTEqual().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTIntType() != null)
        {
            node.getTIntType().apply(this);
        }
        outAIntNumber(node);
    }

    public void inAMultipleFloats(AMultipleFloats node)
    {
        defaultIn(node);
    }

    public void outAMultipleFloats(AMultipleFloats node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleFloats(AMultipleFloats node)
    {
        inAMultipleFloats(node);
        if(node.getFloats() != null)
        {
            node.getFloats().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTEqual() != null)
        {
            node.getTEqual().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        outAMultipleFloats(node);
    }

    public void inANoneFloats(ANoneFloats node)
    {
        defaultIn(node);
    }

    public void outANoneFloats(ANoneFloats node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoneFloats(ANoneFloats node)
    {
        inANoneFloats(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        outANoneFloats(node);
    }

    public void inAMultipleIntegers(AMultipleIntegers node)
    {
        defaultIn(node);
    }

    public void outAMultipleIntegers(AMultipleIntegers node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleIntegers(AMultipleIntegers node)
    {
        inAMultipleIntegers(node);
        if(node.getIntegers() != null)
        {
            node.getIntegers().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTEqual() != null)
        {
            node.getTEqual().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        outAMultipleIntegers(node);
    }

    public void inANoneIntegers(ANoneIntegers node)
    {
        defaultIn(node);
    }

    public void outANoneIntegers(ANoneIntegers node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoneIntegers(ANoneIntegers node)
    {
        inANoneIntegers(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        outANoneIntegers(node);
    }

    public void inASingleSpecies(ASingleSpecies node)
    {
        defaultIn(node);
    }

    public void outASingleSpecies(ASingleSpecies node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleSpecies(ASingleSpecies node)
    {
        inASingleSpecies(node);
        if(node.getSpecie() != null)
        {
            node.getSpecie().apply(this);
        }
        if(node.getTSpeciesdcl() != null)
        {
            node.getTSpeciesdcl().apply(this);
        }
        outASingleSpecies(node);
    }

    public void inAMultipleSpecie(AMultipleSpecie node)
    {
        defaultIn(node);
    }

    public void outAMultipleSpecie(AMultipleSpecie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleSpecie(AMultipleSpecie node)
    {
        inAMultipleSpecie(node);
        if(node.getSpecie() != null)
        {
            node.getSpecie().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTEqual() != null)
        {
            node.getTEqual().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outAMultipleSpecie(node);
    }

    public void inASingleSpecie(ASingleSpecie node)
    {
        defaultIn(node);
    }

    public void outASingleSpecie(ASingleSpecie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleSpecie(ASingleSpecie node)
    {
        inASingleSpecie(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTEqual() != null)
        {
            node.getTEqual().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outASingleSpecie(node);
    }

    public void inALambdaFuncFunc(ALambdaFuncFunc node)
    {
        defaultIn(node);
    }

    public void outALambdaFuncFunc(ALambdaFuncFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambdaFuncFunc(ALambdaFuncFunc node)
    {
        inALambdaFuncFunc(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTLambda() != null)
        {
            node.getTLambda().apply(this);
        }
        if(node.getTRParen() != null)
        {
            node.getTRParen().apply(this);
        }
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        if(node.getTLParen() != null)
        {
            node.getTLParen().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTFuncdcl() != null)
        {
            node.getTFuncdcl().apply(this);
        }
        outALambdaFuncFunc(node);
    }

    public void inAMultiInput(AMultiInput node)
    {
        defaultIn(node);
    }

    public void outAMultiInput(AMultiInput node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiInput(AMultiInput node)
    {
        inAMultiInput(node);
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAMultiInput(node);
    }

    public void inAVoidInput(AVoidInput node)
    {
        defaultIn(node);
    }

    public void outAVoidInput(AVoidInput node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidInput(AVoidInput node)
    {
        inAVoidInput(node);
        if(node.getTVoiddcl() != null)
        {
            node.getTVoiddcl().apply(this);
        }
        outAVoidInput(node);
    }

    public void inASingleInput(ASingleInput node)
    {
        defaultIn(node);
    }

    public void outASingleInput(ASingleInput node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleInput(ASingleInput node)
    {
        inASingleInput(node);
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outASingleInput(node);
    }

    public void inAFloatType(AFloatType node)
    {
        defaultIn(node);
    }

    public void outAFloatType(AFloatType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatType(AFloatType node)
    {
        inAFloatType(node);
        if(node.getTFloatType() != null)
        {
            node.getTFloatType().apply(this);
        }
        outAFloatType(node);
    }

    public void inARateType(ARateType node)
    {
        defaultIn(node);
    }

    public void outARateType(ARateType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARateType(ARateType node)
    {
        inARateType(node);
        if(node.getTRateType() != null)
        {
            node.getTRateType().apply(this);
        }
        outARateType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getTIntType() != null)
        {
            node.getTIntType().apply(this);
        }
        outAIntType(node);
    }

    public void inADclRate(ADclRate node)
    {
        defaultIn(node);
    }

    public void outADclRate(ADclRate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADclRate(ADclRate node)
    {
        inADclRate(node);
        if(node.getRates() != null)
        {
            node.getRates().apply(this);
        }
        if(node.getTRatedcl() != null)
        {
            node.getTRatedcl().apply(this);
        }
        outADclRate(node);
    }

    public void inAMultipleRates(AMultipleRates node)
    {
        defaultIn(node);
    }

    public void outAMultipleRates(AMultipleRates node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleRates(AMultipleRates node)
    {
        inAMultipleRates(node);
        if(node.getRates() != null)
        {
            node.getRates().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getTFloat() != null)
        {
            node.getTFloat().apply(this);
        }
        if(node.getTEqual() != null)
        {
            node.getTEqual().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outAMultipleRates(node);
    }

    public void inASingleRates(ASingleRates node)
    {
        defaultIn(node);
    }

    public void outASingleRates(ASingleRates node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleRates(ASingleRates node)
    {
        inASingleRates(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        if(node.getTFloat() != null)
        {
            node.getTFloat().apply(this);
        }
        if(node.getTEqual() != null)
        {
            node.getTEqual().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outASingleRates(node);
    }

    public void inATermExpression(ATermExpression node)
    {
        defaultIn(node);
    }

    public void outATermExpression(ATermExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpression(ATermExpression node)
    {
        inATermExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpression(node);
    }

    public void inAOperatorExpression(AOperatorExpression node)
    {
        defaultIn(node);
    }

    public void outAOperatorExpression(AOperatorExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperatorExpression(AOperatorExpression node)
    {
        inAOperatorExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOperator() != null)
        {
            node.getOperator().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAOperatorExpression(node);
    }

    public void inAExpressoinDouble(AExpressoinDouble node)
    {
        defaultIn(node);
    }

    public void outAExpressoinDouble(AExpressoinDouble node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressoinDouble(AExpressoinDouble node)
    {
        inAExpressoinDouble(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressoinDouble(node);
    }

    public void inAPlusOperator(APlusOperator node)
    {
        defaultIn(node);
    }

    public void outAPlusOperator(APlusOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOperator(APlusOperator node)
    {
        inAPlusOperator(node);
        if(node.getTPlus() != null)
        {
            node.getTPlus().apply(this);
        }
        outAPlusOperator(node);
    }

    public void inAMinusOperator(AMinusOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusOperator(AMinusOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOperator(AMinusOperator node)
    {
        inAMinusOperator(node);
        if(node.getTMinus() != null)
        {
            node.getTMinus().apply(this);
        }
        outAMinusOperator(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAMultTerm(AMultTerm node)
    {
        defaultIn(node);
    }

    public void outAMultTerm(AMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTerm(AMultTerm node)
    {
        inAMultTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getTMult() != null)
        {
            node.getTMult().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAMultTerm(node);
    }

    public void inADivideTerm(ADivideTerm node)
    {
        defaultIn(node);
    }

    public void outADivideTerm(ADivideTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideTerm(ADivideTerm node)
    {
        inADivideTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getTDiv() != null)
        {
            node.getTDiv().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outADivideTerm(node);
    }

    public void inAOptermPower(AOptermPower node)
    {
        defaultIn(node);
    }

    public void outAOptermPower(AOptermPower node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOptermPower(AOptermPower node)
    {
        inAOptermPower(node);
        if(node.getPowerIn() != null)
        {
            node.getPowerIn().apply(this);
        }
        if(node.getTPower() != null)
        {
            node.getTPower().apply(this);
        }
        if(node.getParen() != null)
        {
            node.getParen().apply(this);
        }
        outAOptermPower(node);
    }

    public void inAParenPower(AParenPower node)
    {
        defaultIn(node);
    }

    public void outAParenPower(AParenPower node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenPower(AParenPower node)
    {
        inAParenPower(node);
        if(node.getParen() != null)
        {
            node.getParen().apply(this);
        }
        outAParenPower(node);
    }

    public void inAParentesesParen(AParentesesParen node)
    {
        defaultIn(node);
    }

    public void outAParentesesParen(AParentesesParen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesParen(AParentesesParen node)
    {
        inAParentesesParen(node);
        if(node.getTRParen() != null)
        {
            node.getTRParen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTLParen() != null)
        {
            node.getTLParen().apply(this);
        }
        outAParentesesParen(node);
    }

    public void inAFactorParen(AFactorParen node)
    {
        defaultIn(node);
    }

    public void outAFactorParen(AFactorParen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorParen(AFactorParen node)
    {
        inAFactorParen(node);
        if(node.getPolarity() != null)
        {
            node.getPolarity().apply(this);
        }
        outAFactorParen(node);
    }

    public void inAPositivePolarity(APositivePolarity node)
    {
        defaultIn(node);
    }

    public void outAPositivePolarity(APositivePolarity node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPositivePolarity(APositivePolarity node)
    {
        inAPositivePolarity(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAPositivePolarity(node);
    }

    public void inANegativeParenPolarity(ANegativeParenPolarity node)
    {
        defaultIn(node);
    }

    public void outANegativeParenPolarity(ANegativeParenPolarity node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativeParenPolarity(ANegativeParenPolarity node)
    {
        inANegativeParenPolarity(node);
        if(node.getTRParen() != null)
        {
            node.getTRParen().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getTMinus() != null)
        {
            node.getTMinus().apply(this);
        }
        if(node.getTLParen() != null)
        {
            node.getTLParen().apply(this);
        }
        outANegativeParenPolarity(node);
    }

    public void inAIntegerFactor(AIntegerFactor node)
    {
        defaultIn(node);
    }

    public void outAIntegerFactor(AIntegerFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerFactor(AIntegerFactor node)
    {
        inAIntegerFactor(node);
        if(node.getTInt() != null)
        {
            node.getTInt().apply(this);
        }
        outAIntegerFactor(node);
    }

    public void inAVariableFactor(AVariableFactor node)
    {
        defaultIn(node);
    }

    public void outAVariableFactor(AVariableFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableFactor(AVariableFactor node)
    {
        inAVariableFactor(node);
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outAVariableFactor(node);
    }

    public void inAFloatFactor(AFloatFactor node)
    {
        defaultIn(node);
    }

    public void outAFloatFactor(AFloatFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatFactor(AFloatFactor node)
    {
        inAFloatFactor(node);
        if(node.getTFloat() != null)
        {
            node.getTFloat().apply(this);
        }
        outAFloatFactor(node);
    }

    public void inAFactorPowerIn(AFactorPowerIn node)
    {
        defaultIn(node);
    }

    public void outAFactorPowerIn(AFactorPowerIn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorPowerIn(AFactorPowerIn node)
    {
        inAFactorPowerIn(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorPowerIn(node);
    }

    public void inAExpressionPowerIn(AExpressionPowerIn node)
    {
        defaultIn(node);
    }

    public void outAExpressionPowerIn(AExpressionPowerIn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionPowerIn(AExpressionPowerIn node)
    {
        inAExpressionPowerIn(node);
        if(node.getTRParen() != null)
        {
            node.getTRParen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTLParen() != null)
        {
            node.getTLParen().apply(this);
        }
        outAExpressionPowerIn(node);
    }

    public void inAWhileLoop(AWhileLoop node)
    {
        defaultIn(node);
    }

    public void outAWhileLoop(AWhileLoop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileLoop(AWhileLoop node)
    {
        inAWhileLoop(node);
        if(node.getTRParen() != null)
        {
            node.getTRParen().apply(this);
        }
        if(node.getLogicalExprs() != null)
        {
            node.getLogicalExprs().apply(this);
        }
        if(node.getTLParen() != null)
        {
            node.getTLParen().apply(this);
        }
        if(node.getTWhiledcl() != null)
        {
            node.getTWhiledcl().apply(this);
        }
        outAWhileLoop(node);
    }

    public void inASingleLogicalExprs(ASingleLogicalExprs node)
    {
        defaultIn(node);
    }

    public void outASingleLogicalExprs(ASingleLogicalExprs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleLogicalExprs(ASingleLogicalExprs node)
    {
        inASingleLogicalExprs(node);
        if(node.getLogicalExpr() != null)
        {
            node.getLogicalExpr().apply(this);
        }
        outASingleLogicalExprs(node);
    }

    public void inAMultipleLogicalExprs(AMultipleLogicalExprs node)
    {
        defaultIn(node);
    }

    public void outAMultipleLogicalExprs(AMultipleLogicalExprs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleLogicalExprs(AMultipleLogicalExprs node)
    {
        inAMultipleLogicalExprs(node);
        if(node.getLogicalExprs() != null)
        {
            node.getLogicalExprs().apply(this);
        }
        if(node.getBoolOperator() != null)
        {
            node.getBoolOperator().apply(this);
        }
        if(node.getLogicalExpr() != null)
        {
            node.getLogicalExpr().apply(this);
        }
        outAMultipleLogicalExprs(node);
    }

    public void inASingleLogicalExpr(ASingleLogicalExpr node)
    {
        defaultIn(node);
    }

    public void outASingleLogicalExpr(ASingleLogicalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleLogicalExpr(ASingleLogicalExpr node)
    {
        inASingleLogicalExpr(node);
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        if(node.getLogicalOperator() != null)
        {
            node.getLogicalOperator().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASingleLogicalExpr(node);
    }

    public void inAOrBoolOperator(AOrBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAOrBoolOperator(AOrBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrBoolOperator(AOrBoolOperator node)
    {
        inAOrBoolOperator(node);
        if(node.getTOr() != null)
        {
            node.getTOr().apply(this);
        }
        outAOrBoolOperator(node);
    }

    public void inAAndBoolOperator(AAndBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAAndBoolOperator(AAndBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndBoolOperator(AAndBoolOperator node)
    {
        inAAndBoolOperator(node);
        if(node.getTAnd() != null)
        {
            node.getTAnd().apply(this);
        }
        outAAndBoolOperator(node);
    }

    public void inAGreaterEqualLogicalOperator(AGreaterEqualLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualLogicalOperator(AGreaterEqualLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualLogicalOperator(AGreaterEqualLogicalOperator node)
    {
        inAGreaterEqualLogicalOperator(node);
        if(node.getTEqualOrGreater() != null)
        {
            node.getTEqualOrGreater().apply(this);
        }
        outAGreaterEqualLogicalOperator(node);
    }

    public void inASmallerEqualLogicalOperator(ASmallerEqualLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outASmallerEqualLogicalOperator(ASmallerEqualLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASmallerEqualLogicalOperator(ASmallerEqualLogicalOperator node)
    {
        inASmallerEqualLogicalOperator(node);
        if(node.getTEqualOrSmaller() != null)
        {
            node.getTEqualOrSmaller().apply(this);
        }
        outASmallerEqualLogicalOperator(node);
    }

    public void inAGreaterLogicalOperator(AGreaterLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAGreaterLogicalOperator(AGreaterLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterLogicalOperator(AGreaterLogicalOperator node)
    {
        inAGreaterLogicalOperator(node);
        if(node.getTGreater() != null)
        {
            node.getTGreater().apply(this);
        }
        outAGreaterLogicalOperator(node);
    }

    public void inASmallerLogicalOperator(ASmallerLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outASmallerLogicalOperator(ASmallerLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASmallerLogicalOperator(ASmallerLogicalOperator node)
    {
        inASmallerLogicalOperator(node);
        if(node.getTSmaller() != null)
        {
            node.getTSmaller().apply(this);
        }
        outASmallerLogicalOperator(node);
    }

    public void inAEqualLogicalOperator(AEqualLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAEqualLogicalOperator(AEqualLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualLogicalOperator(AEqualLogicalOperator node)
    {
        inAEqualLogicalOperator(node);
        if(node.getTLogicalEqual() != null)
        {
            node.getTLogicalEqual().apply(this);
        }
        outAEqualLogicalOperator(node);
    }

    public void inANotLogicalOperator(ANotLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outANotLogicalOperator(ANotLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotLogicalOperator(ANotLogicalOperator node)
    {
        inANotLogicalOperator(node);
        if(node.getTNot() != null)
        {
            node.getTNot().apply(this);
        }
        outANotLogicalOperator(node);
    }

    public void inANotEqualLogicalOperator(ANotEqualLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outANotEqualLogicalOperator(ANotEqualLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualLogicalOperator(ANotEqualLogicalOperator node)
    {
        inANotEqualLogicalOperator(node);
        if(node.getTNotEqual() != null)
        {
            node.getTNotEqual().apply(this);
        }
        outANotEqualLogicalOperator(node);
    }

    public void inADclTitration(ADclTitration node)
    {
        defaultIn(node);
    }

    public void outADclTitration(ADclTitration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADclTitration(ADclTitration node)
    {
        inADclTitration(node);
        if(node.getTitrations() != null)
        {
            node.getTitrations().apply(this);
        }
        if(node.getTEqual() != null)
        {
            node.getTEqual().apply(this);
        }
        if(node.getTitrationdcl() != null)
        {
            node.getTitrationdcl().apply(this);
        }
        outADclTitration(node);
    }

    public void inASingleTitrations(ASingleTitrations node)
    {
        defaultIn(node);
    }

    public void outASingleTitrations(ASingleTitrations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleTitrations(ASingleTitrations node)
    {
        inASingleTitrations(node);
        if(node.getTitrationEnd() != null)
        {
            node.getTitrationEnd().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getTColon() != null)
        {
            node.getTColon().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outASingleTitrations(node);
    }

    public void inAMultipleTitrations(AMultipleTitrations node)
    {
        defaultIn(node);
    }

    public void outAMultipleTitrations(AMultipleTitrations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleTitrations(AMultipleTitrations node)
    {
        inAMultipleTitrations(node);
        if(node.getTitrations() != null)
        {
            node.getTitrations().apply(this);
        }
        if(node.getTitrationContinue() != null)
        {
            node.getTitrationContinue().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getTColon() != null)
        {
            node.getTColon().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outAMultipleTitrations(node);
    }

    public void inALoopTitrationEnd(ALoopTitrationEnd node)
    {
        defaultIn(node);
    }

    public void outALoopTitrationEnd(ALoopTitrationEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopTitrationEnd(ALoopTitrationEnd node)
    {
        inALoopTitrationEnd(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        if(node.getLoop() != null)
        {
            node.getLoop().apply(this);
        }
        if(node.getTColon() != null)
        {
            node.getTColon().apply(this);
        }
        outALoopTitrationEnd(node);
    }

    public void inASemicolonTitrationEnd(ASemicolonTitrationEnd node)
    {
        defaultIn(node);
    }

    public void outASemicolonTitrationEnd(ASemicolonTitrationEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonTitrationEnd(ASemicolonTitrationEnd node)
    {
        inASemicolonTitrationEnd(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        outASemicolonTitrationEnd(node);
    }

    public void inALoopTitrationContinue(ALoopTitrationContinue node)
    {
        defaultIn(node);
    }

    public void outALoopTitrationContinue(ALoopTitrationContinue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopTitrationContinue(ALoopTitrationContinue node)
    {
        inALoopTitrationContinue(node);
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getLoop() != null)
        {
            node.getLoop().apply(this);
        }
        if(node.getTColon() != null)
        {
            node.getTColon().apply(this);
        }
        outALoopTitrationContinue(node);
    }

    public void inACommaTitrationContinue(ACommaTitrationContinue node)
    {
        defaultIn(node);
    }

    public void outACommaTitrationContinue(ACommaTitrationContinue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaTitrationContinue(ACommaTitrationContinue node)
    {
        inACommaTitrationContinue(node);
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        outACommaTitrationContinue(node);
    }

    public void inARemoveTitrationdcl(ARemoveTitrationdcl node)
    {
        defaultIn(node);
    }

    public void outARemoveTitrationdcl(ARemoveTitrationdcl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemoveTitrationdcl(ARemoveTitrationdcl node)
    {
        inARemoveTitrationdcl(node);
        if(node.getTRemmol() != null)
        {
            node.getTRemmol().apply(this);
        }
        outARemoveTitrationdcl(node);
    }

    public void inAAddTitrationdcl(AAddTitrationdcl node)
    {
        defaultIn(node);
    }

    public void outAAddTitrationdcl(AAddTitrationdcl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddTitrationdcl(AAddTitrationdcl node)
    {
        inAAddTitrationdcl(node);
        if(node.getTAddmol() != null)
        {
            node.getTAddmol().apply(this);
        }
        outAAddTitrationdcl(node);
    }

    public void inADoubleReaction(ADoubleReaction node)
    {
        defaultIn(node);
    }

    public void outADoubleReaction(ADoubleReaction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleReaction(ADoubleReaction node)
    {
        inADoubleReaction(node);
        if(node.getArrows() != null)
        {
            node.getArrows().apply(this);
        }
        if(node.getReactant() != null)
        {
            node.getReactant().apply(this);
        }
        outADoubleReaction(node);
    }

    public void inAMultipleReactant(AMultipleReactant node)
    {
        defaultIn(node);
    }

    public void outAMultipleReactant(AMultipleReactant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleReactant(AMultipleReactant node)
    {
        inAMultipleReactant(node);
        if(node.getReactant() != null)
        {
            node.getReactant().apply(this);
        }
        if(node.getTPlus() != null)
        {
            node.getTPlus().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTMult() != null)
        {
            node.getTMult().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMultipleReactant(node);
    }

    public void inAPlusReactant(APlusReactant node)
    {
        defaultIn(node);
    }

    public void outAPlusReactant(APlusReactant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusReactant(APlusReactant node)
    {
        inAPlusReactant(node);
        if(node.getReactant() != null)
        {
            node.getReactant().apply(this);
        }
        if(node.getTPlus() != null)
        {
            node.getTPlus().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outAPlusReactant(node);
    }

    public void inAStringReactant(AStringReactant node)
    {
        defaultIn(node);
    }

    public void outAStringReactant(AStringReactant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringReactant(AStringReactant node)
    {
        inAStringReactant(node);
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outAStringReactant(node);
    }

    public void inASingleReactant(ASingleReactant node)
    {
        defaultIn(node);
    }

    public void outASingleReactant(ASingleReactant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleReactant(ASingleReactant node)
    {
        inASingleReactant(node);
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTMult() != null)
        {
            node.getTMult().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outASingleReactant(node);
    }

    public void inAOneWayArrows(AOneWayArrows node)
    {
        defaultIn(node);
    }

    public void outAOneWayArrows(AOneWayArrows node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneWayArrows(AOneWayArrows node)
    {
        inAOneWayArrows(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        if(node.getReactionRateI() != null)
        {
            node.getReactionRateI().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getReactant() != null)
        {
            node.getReactant().apply(this);
        }
        if(node.getTArrow() != null)
        {
            node.getTArrow().apply(this);
        }
        outAOneWayArrows(node);
    }

    public void inATwoWayArrows(ATwoWayArrows node)
    {
        defaultIn(node);
    }

    public void outATwoWayArrows(ATwoWayArrows node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATwoWayArrows(ATwoWayArrows node)
    {
        inATwoWayArrows(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        if(node.getReactionRateIi() != null)
        {
            node.getReactionRateIi().apply(this);
        }
        if(node.getTColon() != null)
        {
            node.getTColon().apply(this);
        }
        if(node.getReactionRateI() != null)
        {
            node.getReactionRateI().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getReactant() != null)
        {
            node.getReactant().apply(this);
        }
        if(node.getTDoubleArrow() != null)
        {
            node.getTDoubleArrow().apply(this);
        }
        outATwoWayArrows(node);
    }

    public void inAFuncReactionRateI(AFuncReactionRateI node)
    {
        defaultIn(node);
    }

    public void outAFuncReactionRateI(AFuncReactionRateI node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncReactionRateI(AFuncReactionRateI node)
    {
        inAFuncReactionRateI(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncReactionRateI(node);
    }

    public void inAUnitReactionRateI(AUnitReactionRateI node)
    {
        defaultIn(node);
    }

    public void outAUnitReactionRateI(AUnitReactionRateI node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnitReactionRateI(AUnitReactionRateI node)
    {
        inAUnitReactionRateI(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAUnitReactionRateI(node);
    }

    public void inAReactionRateReactionRateIi(AReactionRateReactionRateIi node)
    {
        defaultIn(node);
    }

    public void outAReactionRateReactionRateIi(AReactionRateReactionRateIi node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReactionRateReactionRateIi(AReactionRateReactionRateIi node)
    {
        inAReactionRateReactionRateIi(node);
        if(node.getReactionRateI() != null)
        {
            node.getReactionRateI().apply(this);
        }
        outAReactionRateReactionRateIi(node);
    }

    public void inAFCallFuncCall(AFCallFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFCallFuncCall(AFCallFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFCallFuncCall(AFCallFuncCall node)
    {
        inAFCallFuncCall(node);
        if(node.getFuncParen() != null)
        {
            node.getFuncParen().apply(this);
        }
        if(node.getTLParen() != null)
        {
            node.getTLParen().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outAFCallFuncCall(node);
    }

    public void inAWithParamFuncParen(AWithParamFuncParen node)
    {
        defaultIn(node);
    }

    public void outAWithParamFuncParen(AWithParamFuncParen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithParamFuncParen(AWithParamFuncParen node)
    {
        inAWithParamFuncParen(node);
        if(node.getTRParen() != null)
        {
            node.getTRParen().apply(this);
        }
        if(node.getFuncParameters() != null)
        {
            node.getFuncParameters().apply(this);
        }
        outAWithParamFuncParen(node);
    }

    public void inANoParamFuncParen(ANoParamFuncParen node)
    {
        defaultIn(node);
    }

    public void outANoParamFuncParen(ANoParamFuncParen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoParamFuncParen(ANoParamFuncParen node)
    {
        inANoParamFuncParen(node);
        if(node.getTRParen() != null)
        {
            node.getTRParen().apply(this);
        }
        outANoParamFuncParen(node);
    }

    public void inASingleFuncParameters(ASingleFuncParameters node)
    {
        defaultIn(node);
    }

    public void outASingleFuncParameters(ASingleFuncParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleFuncParameters(ASingleFuncParameters node)
    {
        inASingleFuncParameters(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outASingleFuncParameters(node);
    }

    public void inAMultipleFuncParameters(AMultipleFuncParameters node)
    {
        defaultIn(node);
    }

    public void outAMultipleFuncParameters(AMultipleFuncParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleFuncParameters(AMultipleFuncParameters node)
    {
        inAMultipleFuncParameters(node);
        if(node.getFuncParameters() != null)
        {
            node.getFuncParameters().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMultipleFuncParameters(node);
    }

    public void inASingleCrn(ASingleCrn node)
    {
        defaultIn(node);
    }

    public void outASingleCrn(ASingleCrn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleCrn(ASingleCrn node)
    {
        inASingleCrn(node);
        if(node.getCrnfunc() != null)
        {
            node.getCrnfunc().apply(this);
        }
        if(node.getTCrndcl() != null)
        {
            node.getTCrndcl().apply(this);
        }
        outASingleCrn(node);
    }

    public void inABlockCrnfunc(ABlockCrnfunc node)
    {
        defaultIn(node);
    }

    public void outABlockCrnfunc(ABlockCrnfunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockCrnfunc(ABlockCrnfunc node)
    {
        inABlockCrnfunc(node);
        if(node.getTRTurborg() != null)
        {
            node.getTRTurborg().apply(this);
        }
        {
            List<PReaction> copy = new ArrayList<PReaction>(node.getReaction());
            Collections.reverse(copy);
            for(PReaction e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTLTurborg() != null)
        {
            node.getTLTurborg().apply(this);
        }
        outABlockCrnfunc(node);
    }

    public void inASampleinitSample(ASampleinitSample node)
    {
        defaultIn(node);
    }

    public void outASampleinitSample(ASampleinitSample node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASampleinitSample(ASampleinitSample node)
    {
        inASampleinitSample(node);
        if(node.getSamplefunc() != null)
        {
            node.getSamplefunc().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTSampledcl() != null)
        {
            node.getTSampledcl().apply(this);
        }
        outASampleinitSample(node);
    }

    public void inABodySamplefunc(ABodySamplefunc node)
    {
        defaultIn(node);
    }

    public void outABodySamplefunc(ABodySamplefunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABodySamplefunc(ABodySamplefunc node)
    {
        inABodySamplefunc(node);
        if(node.getTRTurborg() != null)
        {
            node.getTRTurborg().apply(this);
        }
        {
            List<PSamplebody> copy = new ArrayList<PSamplebody>(node.getSamplebody());
            Collections.reverse(copy);
            for(PSamplebody e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTLTurborg() != null)
        {
            node.getTLTurborg().apply(this);
        }
        outABodySamplefunc(node);
    }

    public void inARateSamplebody(ARateSamplebody node)
    {
        defaultIn(node);
    }

    public void outARateSamplebody(ARateSamplebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARateSamplebody(ARateSamplebody node)
    {
        inARateSamplebody(node);
        if(node.getRate() != null)
        {
            node.getRate().apply(this);
        }
        outARateSamplebody(node);
    }

    public void inANumberinitSamplebody(ANumberinitSamplebody node)
    {
        defaultIn(node);
    }

    public void outANumberinitSamplebody(ANumberinitSamplebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberinitSamplebody(ANumberinitSamplebody node)
    {
        inANumberinitSamplebody(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberinitSamplebody(node);
    }

    public void inAAltervalueSamplebody(AAltervalueSamplebody node)
    {
        defaultIn(node);
    }

    public void outAAltervalueSamplebody(AAltervalueSamplebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAltervalueSamplebody(AAltervalueSamplebody node)
    {
        inAAltervalueSamplebody(node);
        if(node.getAltervalue() != null)
        {
            node.getAltervalue().apply(this);
        }
        outAAltervalueSamplebody(node);
    }

    public void inASpeciesSamplebody(ASpeciesSamplebody node)
    {
        defaultIn(node);
    }

    public void outASpeciesSamplebody(ASpeciesSamplebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpeciesSamplebody(ASpeciesSamplebody node)
    {
        inASpeciesSamplebody(node);
        if(node.getSpecies() != null)
        {
            node.getSpecies().apply(this);
        }
        outASpeciesSamplebody(node);
    }

    public void inAFuncSamplebody(AFuncSamplebody node)
    {
        defaultIn(node);
    }

    public void outAFuncSamplebody(AFuncSamplebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncSamplebody(AFuncSamplebody node)
    {
        inAFuncSamplebody(node);
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outAFuncSamplebody(node);
    }

    public void inACrnSamplebody(ACrnSamplebody node)
    {
        defaultIn(node);
    }

    public void outACrnSamplebody(ACrnSamplebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACrnSamplebody(ACrnSamplebody node)
    {
        inACrnSamplebody(node);
        if(node.getCrn() != null)
        {
            node.getCrn().apply(this);
        }
        outACrnSamplebody(node);
    }

    public void inATitsSamplebody(ATitsSamplebody node)
    {
        defaultIn(node);
    }

    public void outATitsSamplebody(ATitsSamplebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATitsSamplebody(ATitsSamplebody node)
    {
        inATitsSamplebody(node);
        if(node.getTitration() != null)
        {
            node.getTitration().apply(this);
        }
        outATitsSamplebody(node);
    }

    public void inADclProtocol(ADclProtocol node)
    {
        defaultIn(node);
    }

    public void outADclProtocol(ADclProtocol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADclProtocol(ADclProtocol node)
    {
        inADclProtocol(node);
        if(node.getTRTurborg() != null)
        {
            node.getTRTurborg().apply(this);
        }
        {
            List<PProtocolbody> copy = new ArrayList<PProtocolbody>(node.getProtocolbody());
            Collections.reverse(copy);
            for(PProtocolbody e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTLTurborg() != null)
        {
            node.getTLTurborg().apply(this);
        }
        if(node.getTProtocoldcl() != null)
        {
            node.getTProtocoldcl().apply(this);
        }
        outADclProtocol(node);
    }

    public void inAEquiliProtocolbody(AEquiliProtocolbody node)
    {
        defaultIn(node);
    }

    public void outAEquiliProtocolbody(AEquiliProtocolbody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEquiliProtocolbody(AEquiliProtocolbody node)
    {
        inAEquiliProtocolbody(node);
        if(node.getEquili() != null)
        {
            node.getEquili().apply(this);
        }
        outAEquiliProtocolbody(node);
    }

    public void inASampleProtocolbody(ASampleProtocolbody node)
    {
        defaultIn(node);
    }

    public void outASampleProtocolbody(ASampleProtocolbody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASampleProtocolbody(ASampleProtocolbody node)
    {
        inASampleProtocolbody(node);
        if(node.getSampleref() != null)
        {
            node.getSampleref().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTSampledcl() != null)
        {
            node.getTSampledcl().apply(this);
        }
        outASampleProtocolbody(node);
    }

    public void inADisposeProtocolbody(ADisposeProtocolbody node)
    {
        defaultIn(node);
    }

    public void outADisposeProtocolbody(ADisposeProtocolbody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADisposeProtocolbody(ADisposeProtocolbody node)
    {
        inADisposeProtocolbody(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        if(node.getDisposePara() != null)
        {
            node.getDisposePara().apply(this);
        }
        if(node.getTDisposedcl() != null)
        {
            node.getTDisposedcl().apply(this);
        }
        if(node.getTDot() != null)
        {
            node.getTDot().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outADisposeProtocolbody(node);
    }

    public void inANonzeroDisposePara(ANonzeroDisposePara node)
    {
        defaultIn(node);
    }

    public void outANonzeroDisposePara(ANonzeroDisposePara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonzeroDisposePara(ANonzeroDisposePara node)
    {
        inANonzeroDisposePara(node);
        if(node.getTRParen() != null)
        {
            node.getTRParen().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getTLParen() != null)
        {
            node.getTLParen().apply(this);
        }
        outANonzeroDisposePara(node);
    }

    public void inANoneDisposePara(ANoneDisposePara node)
    {
        defaultIn(node);
    }

    public void outANoneDisposePara(ANoneDisposePara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoneDisposePara(ANoneDisposePara node)
    {
        inANoneDisposePara(node);
        if(node.getTRParen() != null)
        {
            node.getTRParen().apply(this);
        }
        if(node.getTLParen() != null)
        {
            node.getTLParen().apply(this);
        }
        outANoneDisposePara(node);
    }

    public void inAMixSampleref(AMixSampleref node)
    {
        defaultIn(node);
    }

    public void outAMixSampleref(AMixSampleref node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMixSampleref(AMixSampleref node)
    {
        inAMixSampleref(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        if(node.getTRParen() != null)
        {
            node.getTRParen().apply(this);
        }
        if(node.getProtocolparam() != null)
        {
            node.getProtocolparam().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTLParen() != null)
        {
            node.getTLParen().apply(this);
        }
        if(node.getTMixdcl() != null)
        {
            node.getTMixdcl().apply(this);
        }
        if(node.getTEqual() != null)
        {
            node.getTEqual().apply(this);
        }
        outAMixSampleref(node);
    }

    public void inASplitSampleref(ASplitSampleref node)
    {
        defaultIn(node);
    }

    public void outASplitSampleref(ASplitSampleref node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASplitSampleref(ASplitSampleref node)
    {
        inASplitSampleref(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        if(node.getTRParen() != null)
        {
            node.getTRParen().apply(this);
        }
        if(node.getFuncParameters() != null)
        {
            node.getFuncParameters().apply(this);
        }
        if(node.getTLParen() != null)
        {
            node.getTLParen().apply(this);
        }
        if(node.getTSplitdcl() != null)
        {
            node.getTSplitdcl().apply(this);
        }
        if(node.getTDot() != null)
        {
            node.getTDot().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTEqual() != null)
        {
            node.getTEqual().apply(this);
        }
        if(node.getProtoexstend() != null)
        {
            node.getProtoexstend().apply(this);
        }
        outASplitSampleref(node);
    }

    public void inAMultiProtocolparam(AMultiProtocolparam node)
    {
        defaultIn(node);
    }

    public void outAMultiProtocolparam(AMultiProtocolparam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiProtocolparam(AMultiProtocolparam node)
    {
        inAMultiProtocolparam(node);
        if(node.getProtocolparam() != null)
        {
            node.getProtocolparam().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outAMultiProtocolparam(node);
    }

    public void inASingleProtocolparam(ASingleProtocolparam node)
    {
        defaultIn(node);
    }

    public void outASingleProtocolparam(ASingleProtocolparam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleProtocolparam(ASingleProtocolparam node)
    {
        inASingleProtocolparam(node);
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        outASingleProtocolparam(node);
    }

    public void inAMultiProtoexstend(AMultiProtoexstend node)
    {
        defaultIn(node);
    }

    public void outAMultiProtoexstend(AMultiProtoexstend node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiProtoexstend(AMultiProtoexstend node)
    {
        inAMultiProtoexstend(node);
        if(node.getProtoexstend() != null)
        {
            node.getProtoexstend().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        outAMultiProtoexstend(node);
    }

    public void inASingleProtoexstend(ASingleProtoexstend node)
    {
        defaultIn(node);
    }

    public void outASingleProtoexstend(ASingleProtoexstend node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleProtoexstend(ASingleProtoexstend node)
    {
        inASingleProtoexstend(node);
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        outASingleProtoexstend(node);
    }

    public void inASingleEquili(ASingleEquili node)
    {
        defaultIn(node);
    }

    public void outASingleEquili(ASingleEquili node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleEquili(ASingleEquili node)
    {
        inASingleEquili(node);
        if(node.getExtendequili() != null)
        {
            node.getExtendequili().apply(this);
        }
        if(node.getOption() != null)
        {
            node.getOption().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getTFordcl() != null)
        {
            node.getTFordcl().apply(this);
        }
        if(node.getTString() != null)
        {
            node.getTString().apply(this);
        }
        if(node.getTEquilibratedcl() != null)
        {
            node.getTEquilibratedcl().apply(this);
        }
        outASingleEquili(node);
    }

    public void inATimeOption(ATimeOption node)
    {
        defaultIn(node);
    }

    public void outATimeOption(ATimeOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimeOption(ATimeOption node)
    {
        inATimeOption(node);
        if(node.getTTime() != null)
        {
            node.getTTime().apply(this);
        }
        outATimeOption(node);
    }

    public void inACycleOption(ACycleOption node)
    {
        defaultIn(node);
    }

    public void outACycleOption(ACycleOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACycleOption(ACycleOption node)
    {
        inACycleOption(node);
        if(node.getTCycle() != null)
        {
            node.getTCycle().apply(this);
        }
        outACycleOption(node);
    }

    public void inASemiExtendequili(ASemiExtendequili node)
    {
        defaultIn(node);
    }

    public void outASemiExtendequili(ASemiExtendequili node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiExtendequili(ASemiExtendequili node)
    {
        inASemiExtendequili(node);
        if(node.getTimestep() != null)
        {
            node.getTimestep().apply(this);
        }
        outASemiExtendequili(node);
    }

    public void inAStepExtendequili(AStepExtendequili node)
    {
        defaultIn(node);
    }

    public void outAStepExtendequili(AStepExtendequili node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStepExtendequili(AStepExtendequili node)
    {
        inAStepExtendequili(node);
        if(node.getTimestep() != null)
        {
            node.getTimestep().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getTBydcl() != null)
        {
            node.getTBydcl().apply(this);
        }
        outAStepExtendequili(node);
    }

    public void inAWithTimestep(AWithTimestep node)
    {
        defaultIn(node);
    }

    public void outAWithTimestep(AWithTimestep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithTimestep(AWithTimestep node)
    {
        inAWithTimestep(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getTEach() != null)
        {
            node.getTEach().apply(this);
        }
        outAWithTimestep(node);
    }

    public void inANoTimestep(ANoTimestep node)
    {
        defaultIn(node);
    }

    public void outANoTimestep(ANoTimestep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoTimestep(ANoTimestep node)
    {
        inANoTimestep(node);
        if(node.getTSemicolon() != null)
        {
            node.getTSemicolon().apply(this);
        }
        outANoTimestep(node);
    }
}
